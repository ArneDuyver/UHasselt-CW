   1               		.file	"simpleserial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	check_version
  14               	check_version:
  15               	.LFB12:
  16               		.file 1 ".././simpleserial/simpleserial.c"
   1:.././simpleserial/simpleserial.c **** // simpleserial.c
   2:.././simpleserial/simpleserial.c **** 
   3:.././simpleserial/simpleserial.c **** #include "simpleserial.h"
   4:.././simpleserial/simpleserial.c **** #include <stdint.h>
   5:.././simpleserial/simpleserial.c **** #include "hal.h"
   6:.././simpleserial/simpleserial.c **** 
   7:.././simpleserial/simpleserial.c **** 
   8:.././simpleserial/simpleserial.c **** #define MAX_SS_CMDS 16
   9:.././simpleserial/simpleserial.c **** static int num_commands = 0;
  10:.././simpleserial/simpleserial.c **** 
  11:.././simpleserial/simpleserial.c **** #define MAX_SS_LEN 192
  12:.././simpleserial/simpleserial.c **** 
  13:.././simpleserial/simpleserial.c **** //#define SS_VER_1_0 0
  14:.././simpleserial/simpleserial.c **** //#define SS_VER_1_1 1
  15:.././simpleserial/simpleserial.c **** //#define SS_VER_2_0 2
  16:.././simpleserial/simpleserial.c **** 
  17:.././simpleserial/simpleserial.c **** 
  18:.././simpleserial/simpleserial.c **** #define CRC 0xA6
  19:.././simpleserial/simpleserial.c **** uint8_t ss_crc(uint8_t *buf, uint8_t len)
  20:.././simpleserial/simpleserial.c **** {
  21:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  22:.././simpleserial/simpleserial.c **** 	uint8_t crc = 0x00;
  23:.././simpleserial/simpleserial.c **** 	while (len--) {
  24:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
  25:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
  27:.././simpleserial/simpleserial.c **** 		}
  28:.././simpleserial/simpleserial.c **** 	}
  29:.././simpleserial/simpleserial.c **** 	return crc;
  30:.././simpleserial/simpleserial.c **** 
  31:.././simpleserial/simpleserial.c **** }
  32:.././simpleserial/simpleserial.c **** 
  33:.././simpleserial/simpleserial.c **** // [B_STUFF, CMD, SCMD, LEN, B_STUFF, DATA..., CRC, TERM]
  34:.././simpleserial/simpleserial.c **** 
  35:.././simpleserial/simpleserial.c **** //#define SS_VER SS_VER_2_0
  36:.././simpleserial/simpleserial.c **** 
  37:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_2_0
  38:.././simpleserial/simpleserial.c **** 
  39:.././simpleserial/simpleserial.c **** 
  40:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
  41:.././simpleserial/simpleserial.c **** {
  42:.././simpleserial/simpleserial.c **** 	char c;
  43:.././simpleserial/simpleserial.c **** 	unsigned int len;
  44:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t *);
  45:.././simpleserial/simpleserial.c **** } ss_cmd;
  46:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
  47:.././simpleserial/simpleserial.c **** 
  48:.././simpleserial/simpleserial.c **** void ss_puts(char *x)
  49:.././simpleserial/simpleserial.c **** {
  50:.././simpleserial/simpleserial.c **** 	do {
  51:.././simpleserial/simpleserial.c **** 		putch(*x);
  52:.././simpleserial/simpleserial.c **** 	} while (*++x);
  53:.././simpleserial/simpleserial.c **** }
  54:.././simpleserial/simpleserial.c **** 
  55:.././simpleserial/simpleserial.c **** #define FRAME_BYTE 0x00
  56:.././simpleserial/simpleserial.c **** 
  57:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  58:.././simpleserial/simpleserial.c **** {
  59:.././simpleserial/simpleserial.c **** 	uint8_t ver = SS_VER;
  60:.././simpleserial/simpleserial.c **** 	simpleserial_put('r', 1, &ver);
  61:.././simpleserial/simpleserial.c **** 	return SS_ERR_OK;
  62:.././simpleserial/simpleserial.c **** }
  63:.././simpleserial/simpleserial.c **** 
  64:.././simpleserial/simpleserial.c **** uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  65:.././simpleserial/simpleserial.c **** {
  66:.././simpleserial/simpleserial.c ****     uint8_t cmd_chars[MAX_SS_CMDS];
  67:.././simpleserial/simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
  68:.././simpleserial/simpleserial.c ****         cmd_chars[i] = commands[i].c;
  69:.././simpleserial/simpleserial.c ****     }
  70:.././simpleserial/simpleserial.c **** 
  71:.././simpleserial/simpleserial.c ****     simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
  72:.././simpleserial/simpleserial.c ****     return 0x00;
  73:.././simpleserial/simpleserial.c **** 
  74:.././simpleserial/simpleserial.c **** }
  75:.././simpleserial/simpleserial.c **** 
  76:.././simpleserial/simpleserial.c **** uint8_t stuff_data(uint8_t *buf, uint8_t len)
  77:.././simpleserial/simpleserial.c **** {
  78:.././simpleserial/simpleserial.c **** 	uint8_t i = 1;
  79:.././simpleserial/simpleserial.c **** 	uint8_t last = 0;
  80:.././simpleserial/simpleserial.c **** 	for (; i < len; i++) {
  81:.././simpleserial/simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
  82:.././simpleserial/simpleserial.c **** 			buf[last] = i - last;
  83:.././simpleserial/simpleserial.c **** 			last = i;
  84:.././simpleserial/simpleserial.c **** 		}
  85:.././simpleserial/simpleserial.c **** 	}
  86:.././simpleserial/simpleserial.c **** 	return 0x00;
  87:.././simpleserial/simpleserial.c **** }
  88:.././simpleserial/simpleserial.c **** 
  89:.././simpleserial/simpleserial.c **** uint8_t unstuff_data(uint8_t *buf, uint8_t len)
  90:.././simpleserial/simpleserial.c **** {
  91:.././simpleserial/simpleserial.c **** 	uint8_t next = buf[0];
  92:.././simpleserial/simpleserial.c **** 	buf[0] = 0x00;
  93:.././simpleserial/simpleserial.c **** 	//len -= 1;
  94:.././simpleserial/simpleserial.c **** 	uint8_t tmp = next;
  95:.././simpleserial/simpleserial.c **** 	while ((next < len) && tmp != 0) {
  96:.././simpleserial/simpleserial.c **** 		tmp = buf[next];
  97:.././simpleserial/simpleserial.c **** 		buf[next] = FRAME_BYTE;
  98:.././simpleserial/simpleserial.c **** 		next += tmp;
  99:.././simpleserial/simpleserial.c **** 	}
 100:.././simpleserial/simpleserial.c **** 	return next;
 101:.././simpleserial/simpleserial.c **** }
 102:.././simpleserial/simpleserial.c **** 
 103:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 104:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
 105:.././simpleserial/simpleserial.c **** void simpleserial_init()
 106:.././simpleserial/simpleserial.c **** {
 107:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 108:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 109:.././simpleserial/simpleserial.c **** }
 110:.././simpleserial/simpleserial.c **** 
 111:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*
 112:.././simpleserial/simpleserial.c **** {
 113:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS) {
 114:.././simpleserial/simpleserial.c **** 		putch('a');
 115:.././simpleserial/simpleserial.c **** 		return 1;
 116:.././simpleserial/simpleserial.c **** 	}
 117:.././simpleserial/simpleserial.c **** 
 118:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN) {
 119:.././simpleserial/simpleserial.c **** 		putch('b');
 120:.././simpleserial/simpleserial.c **** 		return 1;
 121:.././simpleserial/simpleserial.c **** 	}
 122:.././simpleserial/simpleserial.c **** 
 123:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 124:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 125:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 126:.././simpleserial/simpleserial.c **** 	num_commands++;
 127:.././simpleserial/simpleserial.c **** 
 128:.././simpleserial/simpleserial.c **** 	return 0;
 129:.././simpleserial/simpleserial.c **** }
 130:.././simpleserial/simpleserial.c **** 
 131:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 132:.././simpleserial/simpleserial.c **** {
 133:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 134:.././simpleserial/simpleserial.c **** 	uint8_t err = 0;
 135:.././simpleserial/simpleserial.c **** 
 136:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < 4; i++) {
 137:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 138:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 139:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 140:.././simpleserial/simpleserial.c **** 			goto ERROR;
 141:.././simpleserial/simpleserial.c **** 		}
 142:.././simpleserial/simpleserial.c **** 	}
 143:.././simpleserial/simpleserial.c **** 	uint8_t next_frame = unstuff_data(data_buf, 4);
 144:.././simpleserial/simpleserial.c **** 
 145:.././simpleserial/simpleserial.c **** 	// check for valid command
 146:.././simpleserial/simpleserial.c **** 	uint8_t c = 0;
 147:.././simpleserial/simpleserial.c **** 	for(c = 0; c < num_commands; c++)
 148:.././simpleserial/simpleserial.c **** 	{
 149:.././simpleserial/simpleserial.c **** 		if(commands[c].c == data_buf[1])
 150:.././simpleserial/simpleserial.c **** 			break;
 151:.././simpleserial/simpleserial.c **** 	}
 152:.././simpleserial/simpleserial.c **** 
 153:.././simpleserial/simpleserial.c **** 	if (c == num_commands) {
 154:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CMD;
 155:.././simpleserial/simpleserial.c **** 		goto ERROR;
 156:.././simpleserial/simpleserial.c **** 	}
 157:.././simpleserial/simpleserial.c **** 
 158:.././simpleserial/simpleserial.c **** 	//check that next frame not beyond end of message
 159:.././simpleserial/simpleserial.c **** 	// account for cmd, scmd, len, data, crc, end of frame
 160:.././simpleserial/simpleserial.c **** 	if ((data_buf[3] + 5) < next_frame) {
 161:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 162:.././simpleserial/simpleserial.c **** 		goto ERROR;
 163:.././simpleserial/simpleserial.c **** 	}
 164:.././simpleserial/simpleserial.c **** 
 165:.././simpleserial/simpleserial.c **** 	// read in data
 166:.././simpleserial/simpleserial.c **** 	// eq to len + crc + frame end
 167:.././simpleserial/simpleserial.c **** 	int i = 4;
 168:.././simpleserial/simpleserial.c **** 	for (; i < data_buf[3] + 5; i++) {
 169:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch();
 170:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 171:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 172:.././simpleserial/simpleserial.c **** 			goto ERROR;
 173:.././simpleserial/simpleserial.c **** 		}
 174:.././simpleserial/simpleserial.c **** 	}
 175:.././simpleserial/simpleserial.c **** 
 176:.././simpleserial/simpleserial.c **** 	//check that final byte is the FRAME_BYTE
 177:.././simpleserial/simpleserial.c **** 	data_buf[i] = getch();
 178:.././simpleserial/simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 179:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 180:.././simpleserial/simpleserial.c **** 		goto ERROR;
 181:.././simpleserial/simpleserial.c **** 	}
 182:.././simpleserial/simpleserial.c **** 
 183:.././simpleserial/simpleserial.c **** 	//fully unstuff data now
 184:.././simpleserial/simpleserial.c **** 	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 185:.././simpleserial/simpleserial.c **** 
 186:.././simpleserial/simpleserial.c **** 	//calc crc excluding original frame offset and frame end and crc
 187:.././simpleserial/simpleserial.c **** 	uint8_t crc = ss_crc(data_buf+1, i-2);
 188:.././simpleserial/simpleserial.c **** 	if (crc != data_buf[i-1]) {
 189:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CRC;
 190:.././simpleserial/simpleserial.c **** 		goto ERROR;
 191:.././simpleserial/simpleserial.c **** 	}
 192:.././simpleserial/simpleserial.c **** 
 193:.././simpleserial/simpleserial.c **** 	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 194:.././simpleserial/simpleserial.c **** 
 195:.././simpleserial/simpleserial.c **** ERROR:
 196:.././simpleserial/simpleserial.c **** 	simpleserial_put('e', 0x01, &err);
 197:.././simpleserial/simpleserial.c **** 	return;
 198:.././simpleserial/simpleserial.c **** }
 199:.././simpleserial/simpleserial.c **** 
 200:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 201:.././simpleserial/simpleserial.c **** {
 202:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 203:.././simpleserial/simpleserial.c **** 	data_buf[0] = 0x00;
 204:.././simpleserial/simpleserial.c **** 	data_buf[1] = c;
 205:.././simpleserial/simpleserial.c **** 	data_buf[2] = size;
 206:.././simpleserial/simpleserial.c **** 	int i = 0;
 207:.././simpleserial/simpleserial.c **** 	for (; i < size; i++) {
 208:.././simpleserial/simpleserial.c **** 		data_buf[i + 3] = output[i];
 209:.././simpleserial/simpleserial.c **** 	}
 210:.././simpleserial/simpleserial.c **** 	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 211:.././simpleserial/simpleserial.c **** 	data_buf[i + 4] = 0x00;
 212:.././simpleserial/simpleserial.c **** 	stuff_data(data_buf, i + 5);
 213:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < size + 5; i++) {
 214:.././simpleserial/simpleserial.c **** 		putch(data_buf[i]);
 215:.././simpleserial/simpleserial.c **** 	}
 216:.././simpleserial/simpleserial.c **** }
 217:.././simpleserial/simpleserial.c **** 
 218:.././simpleserial/simpleserial.c **** 
 219:.././simpleserial/simpleserial.c **** #else
 220:.././simpleserial/simpleserial.c **** 
 221:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
 222:.././simpleserial/simpleserial.c **** {
 223:.././simpleserial/simpleserial.c **** 	char c;
 224:.././simpleserial/simpleserial.c **** 	unsigned int len;
 225:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t*, uint8_t);
 226:.././simpleserial/simpleserial.c **** 	uint8_t flags;
 227:.././simpleserial/simpleserial.c **** } ss_cmd;
 228:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
 229:.././simpleserial/simpleserial.c **** // Callback function for "v" command.
 230:.././simpleserial/simpleserial.c **** // This can exist in v1.0 as long as we don't actually send back an ack ("z")
 231:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t *v, uint8_t len)
 232:.././simpleserial/simpleserial.c **** {
  17               		.loc 1 232 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 233:.././simpleserial/simpleserial.c **** 	return SS_VER;
 234:.././simpleserial/simpleserial.c **** }
  24               		.loc 1 234 0
  25 0000 81E0      		ldi r24,lo8(1)
  26               	.LVL1:
  27 0002 0895      		ret
  28               		.cfi_endproc
  29               	.LFE12:
  31               	.global	ss_crc
  33               	ss_crc:
  34               	.LFB11:
  20:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  35               		.loc 1 20 0
  36               		.cfi_startproc
  37               	.LVL2:
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42 0004 FC01      		movw r30,r24
  22:.././simpleserial/simpleserial.c **** 	while (len--) {
  43               		.loc 1 22 0
  44 0006 80E0      		ldi r24,0
  45               	.LVL3:
  26:.././simpleserial/simpleserial.c **** 		}
  46               		.loc 1 26 0
  47 0008 96EA      		ldi r25,lo8(-90)
  48               	.LVL4:
  49               	.L3:
  23:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
  50               		.loc 1 23 0
  51               	.LVL5:
  52 000a 6150      		subi r22,1
  53 000c 00F0      		brcs .L10
  24:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
  54               		.loc 1 24 0
  55 000e 2191      		ld r18,Z+
  56               	.LVL6:
  57 0010 8227      		eor r24,r18
  58               	.LVL7:
  59 0012 28E0      		ldi r18,lo8(8)
  60 0014 30E0      		ldi r19,0
  61               	.LVL8:
  62               	.L6:
  26:.././simpleserial/simpleserial.c **** 		}
  63               		.loc 1 26 0
  64 0016 87FF      		sbrs r24,7
  65 0018 00C0      		rjmp .L4
  26:.././simpleserial/simpleserial.c **** 		}
  66               		.loc 1 26 0 is_stmt 0 discriminator 1
  67 001a 880F      		lsl r24
  68               	.LVL9:
  69 001c 8927      		eor r24,r25
  70 001e 00C0      		rjmp .L5
  71               	.LVL10:
  72               	.L4:
  26:.././simpleserial/simpleserial.c **** 		}
  73               		.loc 1 26 0 discriminator 2
  74 0020 880F      		lsl r24
  75               	.LVL11:
  76               	.L5:
  77 0022 2150      		subi r18,1
  78 0024 3109      		sbc r19,__zero_reg__
  79               	.LVL12:
  25:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
  80               		.loc 1 25 0 is_stmt 1 discriminator 4
  81 0026 01F4      		brne .L6
  82 0028 00C0      		rjmp .L3
  83               	.LVL13:
  84               	.L10:
  85               	/* epilogue start */
  31:.././simpleserial/simpleserial.c **** 
  86               		.loc 1 31 0
  87 002a 0895      		ret
  88               		.cfi_endproc
  89               	.LFE11:
  91               	.global	hex_decode
  93               	hex_decode:
  94               	.LFB15:
 235:.././simpleserial/simpleserial.c **** 
 236:.././simpleserial/simpleserial.c **** uint8_t ss_num_commands(uint8_t *x, uint8_t len)
 237:.././simpleserial/simpleserial.c **** {
 238:.././simpleserial/simpleserial.c ****     uint8_t ncmds = num_commands & 0xFF;
 239:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 240:.././simpleserial/simpleserial.c ****     return 0x00;
 241:.././simpleserial/simpleserial.c **** }
 242:.././simpleserial/simpleserial.c **** 
 243:.././simpleserial/simpleserial.c **** typedef struct ss_cmd_repr {
 244:.././simpleserial/simpleserial.c ****     uint8_t c;
 245:.././simpleserial/simpleserial.c ****     uint8_t len;
 246:.././simpleserial/simpleserial.c ****     uint8_t flags;
 247:.././simpleserial/simpleserial.c **** } ss_cmd_repr;
 248:.././simpleserial/simpleserial.c **** 
 249:.././simpleserial/simpleserial.c **** uint8_t ss_get_commands(uint8_t *x, uint8_t len)
 250:.././simpleserial/simpleserial.c **** {
 251:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 252:.././simpleserial/simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 253:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 254:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 255:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 256:.././simpleserial/simpleserial.c ****     }
 257:.././simpleserial/simpleserial.c **** 
 258:.././simpleserial/simpleserial.c ****     simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 259:.././simpleserial/simpleserial.c ****     return 0x00;
 260:.././simpleserial/simpleserial.c **** }
 261:.././simpleserial/simpleserial.c **** 
 262:.././simpleserial/simpleserial.c **** static char hex_lookup[16] =
 263:.././simpleserial/simpleserial.c **** {
 264:.././simpleserial/simpleserial.c **** 	'0', '1', '2', '3', '4', '5', '6', '7',
 265:.././simpleserial/simpleserial.c **** 	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
 266:.././simpleserial/simpleserial.c **** };
 267:.././simpleserial/simpleserial.c **** 
 268:.././simpleserial/simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
 269:.././simpleserial/simpleserial.c **** {
  95               		.loc 1 269 0
  96               		.cfi_startproc
  97               	.LVL14:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
 102 002c DB01      		movw r26,r22
 103               	.LBB2:
 270:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
 104               		.loc 1 270 0
 105 002e FA01      		movw r30,r20
 106               	.LVL15:
 107               	.L12:
 108               		.loc 1 270 0 is_stmt 0 discriminator 1
 109 0030 9F01      		movw r18,r30
 110 0032 241B      		sub r18,r20
 111 0034 350B      		sbc r19,r21
 112 0036 2817      		cp r18,r24
 113 0038 3907      		cpc r19,r25
 114 003a 04F4      		brge .L26
 115               	.LBB3:
 271:.././simpleserial/simpleserial.c **** 	{
 272:.././simpleserial/simpleserial.c **** 		char n_hi = ascii_buf[2*i];
 116               		.loc 1 272 0 is_stmt 1
 117 003c 2C91      		ld r18,X
 118               	.LVL16:
 273:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 119               		.loc 1 273 0
 120 003e 1196      		adiw r26,1
 121 0040 3C91      		ld r19,X
 122 0042 1197      		sbiw r26,1
 123               	.LVL17:
 274:.././simpleserial/simpleserial.c **** 
 275:.././simpleserial/simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
 124               		.loc 1 275 0
 125 0044 60ED      		ldi r22,lo8(-48)
 126 0046 630F      		add r22,r19
 127 0048 6A30      		cpi r22,lo8(10)
 128 004a 00F4      		brsh .L13
 276:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 129               		.loc 1 276 0
 130 004c 6083      		st Z,r22
 131 004e 00C0      		rjmp .L14
 132               	.L13:
 277:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 133               		.loc 1 277 0
 134 0050 6FEB      		ldi r22,lo8(-65)
 135 0052 630F      		add r22,r19
 136 0054 6630      		cpi r22,lo8(6)
 137 0056 00F4      		brsh .L15
 278:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 138               		.loc 1 278 0
 139 0058 3753      		subi r19,lo8(-(-55))
 140               	.LVL18:
 141 005a 00C0      		rjmp .L23
 142               	.LVL19:
 143               	.L15:
 279:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 144               		.loc 1 279 0
 145 005c 6FE9      		ldi r22,lo8(-97)
 146 005e 630F      		add r22,r19
 147 0060 6630      		cpi r22,lo8(6)
 148 0062 00F0      		brlo .L16
 149               	.LVL20:
 150               	.L21:
 280:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 281:.././simpleserial/simpleserial.c **** 		else
 282:.././simpleserial/simpleserial.c **** 			return 1;
 151               		.loc 1 282 0
 152 0064 81E0      		ldi r24,lo8(1)
 153 0066 90E0      		ldi r25,0
 154               	.LVL21:
 155 0068 0895      		ret
 156               	.LVL22:
 157               	.L16:
 280:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 158               		.loc 1 280 0
 159 006a 3755      		subi r19,lo8(-(-87))
 160               	.LVL23:
 161               	.L23:
 162 006c 3083      		st Z,r19
 163               	.LVL24:
 164               	.L14:
 283:.././simpleserial/simpleserial.c **** 
 284:.././simpleserial/simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
 165               		.loc 1 284 0
 166 006e 30ED      		ldi r19,lo8(-48)
 167 0070 320F      		add r19,r18
 168 0072 3A30      		cpi r19,lo8(10)
 169 0074 00F4      		brsh .L18
 285:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 170               		.loc 1 285 0
 171 0076 2295      		swap r18
 172               	.LVL25:
 173 0078 207F      		andi r18,lo8(-16)
 174 007a 00C0      		rjmp .L24
 175               	.LVL26:
 176               	.L18:
 286:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 177               		.loc 1 286 0
 178 007c 3FEB      		ldi r19,lo8(-65)
 179 007e 320F      		add r19,r18
 180 0080 3630      		cpi r19,lo8(6)
 181 0082 00F4      		brsh .L20
 287:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 182               		.loc 1 287 0
 183 0084 30E0      		ldi r19,0
 184 0086 2753      		subi r18,55
 185 0088 3109      		sbc r19,__zero_reg__
 186               	.LVL27:
 187 008a 00C0      		rjmp .L25
 188               	.LVL28:
 189               	.L20:
 288:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 190               		.loc 1 288 0
 191 008c 3FE9      		ldi r19,lo8(-97)
 192 008e 320F      		add r19,r18
 193 0090 3630      		cpi r19,lo8(6)
 194 0092 00F4      		brsh .L21
 289:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 195               		.loc 1 289 0
 196 0094 30E0      		ldi r19,0
 197 0096 2755      		subi r18,87
 198 0098 3109      		sbc r19,__zero_reg__
 199               	.LVL29:
 200               	.L25:
 201 009a 64E0      		ldi r22,4
 202               		1:
 203 009c 220F      		lsl r18
 204 009e 331F      		rol r19
 205 00a0 6A95      		dec r22
 206 00a2 01F4      		brne 1b
 207               	.L24:
 208 00a4 3081      		ld r19,Z
 209 00a6 232B      		or r18,r19
 210 00a8 2083      		st Z,r18
 211               	.LVL30:
 212 00aa 3196      		adiw r30,1
 213               	.LVL31:
 214 00ac 1296      		adiw r26,2
 215 00ae 00C0      		rjmp .L12
 216               	.L26:
 217               	.LBE3:
 218               	.LBE2:
 290:.././simpleserial/simpleserial.c **** 		else
 291:.././simpleserial/simpleserial.c **** 			return 1;
 292:.././simpleserial/simpleserial.c **** 	}
 293:.././simpleserial/simpleserial.c **** 
 294:.././simpleserial/simpleserial.c **** 	return 0;
 219               		.loc 1 294 0
 220 00b0 80E0      		ldi r24,0
 221 00b2 90E0      		ldi r25,0
 222               	.LVL32:
 295:.././simpleserial/simpleserial.c **** }
 223               		.loc 1 295 0
 224 00b4 0895      		ret
 225               		.cfi_endproc
 226               	.LFE15:
 228               	.global	simpleserial_addcmd_flags
 230               	simpleserial_addcmd_flags:
 231               	.LFB18:
 296:.././simpleserial/simpleserial.c **** 
 297:.././simpleserial/simpleserial.c **** 
 298:.././simpleserial/simpleserial.c **** 
 299:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 300:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
 301:.././simpleserial/simpleserial.c **** void simpleserial_init()
 302:.././simpleserial/simpleserial.c **** {
 303:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 304:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 305:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('y', 0, ss_num_commands);
 306:.././simpleserial/simpleserial.c **** }
 307:.././simpleserial/simpleserial.c **** 
 308:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
 309:.././simpleserial/simpleserial.c **** {
 310:.././simpleserial/simpleserial.c **** 	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 311:.././simpleserial/simpleserial.c **** }
 312:.././simpleserial/simpleserial.c **** 
 313:.././simpleserial/simpleserial.c **** int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t f
 314:.././simpleserial/simpleserial.c **** {
 232               		.loc 1 314 0
 233               		.cfi_startproc
 234               	.LVL33:
 235               	/* prologue: function */
 236               	/* frame size = 0 */
 237               	/* stack size = 0 */
 238               	.L__stack_usage = 0
 315:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 239               		.loc 1 315 0
 240 00b6 A091 0000 		lds r26,num_commands
 241 00ba B091 0000 		lds r27,num_commands+1
 242 00be A031      		cpi r26,16
 243 00c0 B105      		cpc r27,__zero_reg__
 244 00c2 04F4      		brge .L30
 316:.././simpleserial/simpleserial.c **** 		return 1;
 317:.././simpleserial/simpleserial.c **** 
 318:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN)
 245               		.loc 1 318 0
 246 00c4 603C      		cpi r22,-64
 247 00c6 7105      		cpc r23,__zero_reg__
 248 00c8 00F4      		brsh .L30
 319:.././simpleserial/simpleserial.c **** 		return 1;
 320:.././simpleserial/simpleserial.c **** 
 321:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 249               		.loc 1 321 0
 250 00ca 96E0      		ldi r25,lo8(6)
 251 00cc 9A9F      		mul r25,r26
 252 00ce F001      		movw r30,r0
 253 00d0 9B9F      		mul r25,r27
 254 00d2 F00D      		add r31,r0
 255 00d4 1124      		clr __zero_reg__
 256 00d6 E050      		subi r30,lo8(-(commands))
 257 00d8 F040      		sbci r31,hi8(-(commands))
 258 00da 8083      		st Z,r24
 322:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 259               		.loc 1 322 0
 260 00dc 6183      		std Z+1,r22
 261 00de 7283      		std Z+2,r23
 323:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 262               		.loc 1 323 0
 263 00e0 4383      		std Z+3,r20
 264 00e2 5483      		std Z+4,r21
 324:.././simpleserial/simpleserial.c **** 	commands[num_commands].flags = fl;
 265               		.loc 1 324 0
 266 00e4 2583      		std Z+5,r18
 325:.././simpleserial/simpleserial.c **** 	num_commands++;
 267               		.loc 1 325 0
 268 00e6 1196      		adiw r26,1
 269 00e8 A093 0000 		sts num_commands,r26
 270 00ec B093 0000 		sts num_commands+1,r27
 326:.././simpleserial/simpleserial.c **** 
 327:.././simpleserial/simpleserial.c **** 	return 0;
 271               		.loc 1 327 0
 272 00f0 80E0      		ldi r24,0
 273 00f2 90E0      		ldi r25,0
 274               	.LVL34:
 275 00f4 0895      		ret
 276               	.LVL35:
 277               	.L30:
 316:.././simpleserial/simpleserial.c **** 
 278               		.loc 1 316 0
 279 00f6 81E0      		ldi r24,lo8(1)
 280 00f8 90E0      		ldi r25,0
 281               	.LVL36:
 328:.././simpleserial/simpleserial.c **** }
 282               		.loc 1 328 0
 283 00fa 0895      		ret
 284               		.cfi_endproc
 285               	.LFE18:
 287               	.global	simpleserial_addcmd
 289               	simpleserial_addcmd:
 290               	.LFB17:
 309:.././simpleserial/simpleserial.c **** 	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 291               		.loc 1 309 0
 292               		.cfi_startproc
 293               	.LVL37:
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 0 */
 297               	.L__stack_usage = 0
 310:.././simpleserial/simpleserial.c **** }
 298               		.loc 1 310 0
 299 00fc 20E0      		ldi r18,0
 300 00fe 0C94 0000 		jmp simpleserial_addcmd_flags
 301               	.LVL38:
 302               		.cfi_endproc
 303               	.LFE17:
 305               	.global	simpleserial_init
 307               	simpleserial_init:
 308               	.LFB16:
 302:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 309               		.loc 1 302 0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 303:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 315               		.loc 1 303 0
 316 0102 40E0      		ldi r20,lo8(gs(check_version))
 317 0104 50E0      		ldi r21,hi8(gs(check_version))
 318 0106 60E0      		ldi r22,0
 319 0108 70E0      		ldi r23,0
 320 010a 86E7      		ldi r24,lo8(118)
 321 010c 0E94 0000 		call simpleserial_addcmd
 322               	.LVL39:
 304:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('y', 0, ss_num_commands);
 323               		.loc 1 304 0
 324 0110 40E0      		ldi r20,lo8(gs(ss_get_commands))
 325 0112 50E0      		ldi r21,hi8(gs(ss_get_commands))
 326 0114 60E0      		ldi r22,0
 327 0116 70E0      		ldi r23,0
 328 0118 87E7      		ldi r24,lo8(119)
 329 011a 0E94 0000 		call simpleserial_addcmd
 330               	.LVL40:
 305:.././simpleserial/simpleserial.c **** }
 331               		.loc 1 305 0
 332 011e 40E0      		ldi r20,lo8(gs(ss_num_commands))
 333 0120 50E0      		ldi r21,hi8(gs(ss_num_commands))
 334 0122 60E0      		ldi r22,0
 335 0124 70E0      		ldi r23,0
 336 0126 89E7      		ldi r24,lo8(121)
 337 0128 0C94 0000 		jmp simpleserial_addcmd
 338               	.LVL41:
 339               		.cfi_endproc
 340               	.LFE16:
 342               	.global	simpleserial_put
 344               	simpleserial_put:
 345               	.LFB20:
 329:.././simpleserial/simpleserial.c **** 
 330:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 331:.././simpleserial/simpleserial.c **** {
 332:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 333:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 334:.././simpleserial/simpleserial.c **** 	char c;
 335:.././simpleserial/simpleserial.c **** 
 336:.././simpleserial/simpleserial.c **** 	// Find which command we're receiving
 337:.././simpleserial/simpleserial.c **** 	c = getch();
 338:.././simpleserial/simpleserial.c **** 
 339:.././simpleserial/simpleserial.c **** 	int cmd;
 340:.././simpleserial/simpleserial.c **** 	for(cmd = 0; cmd < num_commands; cmd++)
 341:.././simpleserial/simpleserial.c **** 	{
 342:.././simpleserial/simpleserial.c **** 		if(commands[cmd].c == c)
 343:.././simpleserial/simpleserial.c **** 			break;
 344:.././simpleserial/simpleserial.c **** 	}
 345:.././simpleserial/simpleserial.c **** 
 346:.././simpleserial/simpleserial.c **** 	// If we didn't find a match, give up right away
 347:.././simpleserial/simpleserial.c **** 	if(cmd == num_commands)
 348:.././simpleserial/simpleserial.c **** 		return;
 349:.././simpleserial/simpleserial.c **** 
 350:.././simpleserial/simpleserial.c **** 	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
 351:.././simpleserial/simpleserial.c **** 	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 352:.././simpleserial/simpleserial.c **** 	{
 353:.././simpleserial/simpleserial.c **** 		uint8_t l = 0;
 354:.././simpleserial/simpleserial.c **** 		char buff[2];
 355:.././simpleserial/simpleserial.c **** 		buff[0] = getch();
 356:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 357:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 358:.././simpleserial/simpleserial.c **** 			return;
 359:.././simpleserial/simpleserial.c **** 		commands[cmd].len = l;
 360:.././simpleserial/simpleserial.c **** 	}
 361:.././simpleserial/simpleserial.c **** 
 362:.././simpleserial/simpleserial.c **** 	// Receive characters until we fill the ASCII buffer
 363:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < 2*commands[cmd].len; i++)
 364:.././simpleserial/simpleserial.c **** 	{
 365:.././simpleserial/simpleserial.c **** 		c = getch();
 366:.././simpleserial/simpleserial.c **** 
 367:.././simpleserial/simpleserial.c **** 		// Check for early \n
 368:.././simpleserial/simpleserial.c **** 		if(c == '\n' || c == '\r')
 369:.././simpleserial/simpleserial.c **** 			return;
 370:.././simpleserial/simpleserial.c **** 
 371:.././simpleserial/simpleserial.c **** 		ascii_buf[i] = c;
 372:.././simpleserial/simpleserial.c **** 	}
 373:.././simpleserial/simpleserial.c **** 
 374:.././simpleserial/simpleserial.c **** 	// Assert that last character is \n or \r
 375:.././simpleserial/simpleserial.c **** 	c = getch();
 376:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 377:.././simpleserial/simpleserial.c **** 		return;
 378:.././simpleserial/simpleserial.c **** 
 379:.././simpleserial/simpleserial.c **** 	// ASCII buffer is full: convert to bytes
 380:.././simpleserial/simpleserial.c **** 	// Check for illegal characters here
 381:.././simpleserial/simpleserial.c **** 	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 382:.././simpleserial/simpleserial.c **** 		return;
 383:.././simpleserial/simpleserial.c **** 
 384:.././simpleserial/simpleserial.c **** 	// Callback
 385:.././simpleserial/simpleserial.c **** 	uint8_t ret[1];
 386:.././simpleserial/simpleserial.c **** 	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 387:.././simpleserial/simpleserial.c **** 
 388:.././simpleserial/simpleserial.c **** 	// Acknowledge (if version is 1.1)
 389:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_1_1
 390:.././simpleserial/simpleserial.c **** 	simpleserial_put('z', 1, ret);
 391:.././simpleserial/simpleserial.c **** #endif
 392:.././simpleserial/simpleserial.c **** }
 393:.././simpleserial/simpleserial.c **** 
 394:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 395:.././simpleserial/simpleserial.c **** {
 346               		.loc 1 395 0
 347               		.cfi_startproc
 348               	.LVL42:
 349 012c CF92      		push r12
 350               	.LCFI0:
 351               		.cfi_def_cfa_offset 4
 352               		.cfi_offset 12, -3
 353 012e DF92      		push r13
 354               	.LCFI1:
 355               		.cfi_def_cfa_offset 5
 356               		.cfi_offset 13, -4
 357 0130 EF92      		push r14
 358               	.LCFI2:
 359               		.cfi_def_cfa_offset 6
 360               		.cfi_offset 14, -5
 361 0132 FF92      		push r15
 362               	.LCFI3:
 363               		.cfi_def_cfa_offset 7
 364               		.cfi_offset 15, -6
 365 0134 0F93      		push r16
 366               	.LCFI4:
 367               		.cfi_def_cfa_offset 8
 368               		.cfi_offset 16, -7
 369 0136 1F93      		push r17
 370               	.LCFI5:
 371               		.cfi_def_cfa_offset 9
 372               		.cfi_offset 17, -8
 373 0138 CF93      		push r28
 374               	.LCFI6:
 375               		.cfi_def_cfa_offset 10
 376               		.cfi_offset 28, -9
 377 013a DF93      		push r29
 378               	.LCFI7:
 379               		.cfi_def_cfa_offset 11
 380               		.cfi_offset 29, -10
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 8 */
 384               	.L__stack_usage = 8
 385 013c C62F      		mov r28,r22
 386 013e 8A01      		movw r16,r20
 396:.././simpleserial/simpleserial.c **** 	// Write first character
 397:.././simpleserial/simpleserial.c **** 	putch(c);
 387               		.loc 1 397 0
 388 0140 0E94 0000 		call output_ch_0
 389               	.LVL43:
 390               	.LBB4:
 398:.././simpleserial/simpleserial.c **** 
 399:.././simpleserial/simpleserial.c **** 	// Write each byte as two nibbles
 400:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < size; i++)
 391               		.loc 1 400 0
 392 0144 7801      		movw r14,r16
 393 0146 D0E0      		ldi r29,0
 394               	.LVL44:
 395               	.L34:
 396               		.loc 1 400 0 is_stmt 0 discriminator 1
 397 0148 C701      		movw r24,r14
 398 014a 801B      		sub r24,r16
 399 014c 910B      		sbc r25,r17
 400 014e 8C17      		cp r24,r28
 401 0150 9D07      		cpc r25,r29
 402 0152 04F4      		brge .L36
 403 0154 6701      		movw r12,r14
 401:.././simpleserial/simpleserial.c **** 	{
 402:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] >> 4 ]);
 404               		.loc 1 402 0 is_stmt 1 discriminator 3
 405 0156 D701      		movw r26,r14
 406 0158 ED91      		ld r30,X+
 407 015a 7D01      		movw r14,r26
 408               	.LVL45:
 409 015c E295      		swap r30
 410 015e EF70      		andi r30,lo8(15)
 411 0160 F0E0      		ldi r31,0
 412 0162 E050      		subi r30,lo8(-(hex_lookup))
 413 0164 F040      		sbci r31,hi8(-(hex_lookup))
 414 0166 8081      		ld r24,Z
 415 0168 0E94 0000 		call output_ch_0
 416               	.LVL46:
 403:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 417               		.loc 1 403 0 discriminator 3
 418 016c D601      		movw r26,r12
 419 016e EC91      		ld r30,X
 420 0170 EF70      		andi r30,lo8(15)
 421 0172 F0E0      		ldi r31,0
 422 0174 E050      		subi r30,lo8(-(hex_lookup))
 423 0176 F040      		sbci r31,hi8(-(hex_lookup))
 424 0178 8081      		ld r24,Z
 425 017a 0E94 0000 		call output_ch_0
 426               	.LVL47:
 427 017e 00C0      		rjmp .L34
 428               	.L36:
 429               	.LBE4:
 404:.././simpleserial/simpleserial.c **** 	}
 405:.././simpleserial/simpleserial.c **** 
 406:.././simpleserial/simpleserial.c **** 	// Write trailing '\n'
 407:.././simpleserial/simpleserial.c **** 	putch('\n');
 430               		.loc 1 407 0
 431 0180 8AE0      		ldi r24,lo8(10)
 432               	/* epilogue start */
 408:.././simpleserial/simpleserial.c **** }
 433               		.loc 1 408 0
 434 0182 DF91      		pop r29
 435 0184 CF91      		pop r28
 436               	.LVL48:
 437 0186 1F91      		pop r17
 438 0188 0F91      		pop r16
 439               	.LVL49:
 440 018a FF90      		pop r15
 441 018c EF90      		pop r14
 442               	.LVL50:
 443 018e DF90      		pop r13
 444 0190 CF90      		pop r12
 407:.././simpleserial/simpleserial.c **** }
 445               		.loc 1 407 0
 446 0192 0C94 0000 		jmp output_ch_0
 447               	.LVL51:
 448               		.cfi_endproc
 449               	.LFE20:
 451               	.global	ss_num_commands
 453               	ss_num_commands:
 454               	.LFB13:
 237:.././simpleserial/simpleserial.c ****     uint8_t ncmds = num_commands & 0xFF;
 455               		.loc 1 237 0
 456               		.cfi_startproc
 457               	.LVL52:
 458 0196 CF93      		push r28
 459               	.LCFI8:
 460               		.cfi_def_cfa_offset 4
 461               		.cfi_offset 28, -3
 462 0198 DF93      		push r29
 463               	.LCFI9:
 464               		.cfi_def_cfa_offset 5
 465               		.cfi_offset 29, -4
 466 019a 1F92      		push __zero_reg__
 467               	.LCFI10:
 468               		.cfi_def_cfa_offset 6
 469 019c CDB7      		in r28,__SP_L__
 470 019e DEB7      		in r29,__SP_H__
 471               	.LCFI11:
 472               		.cfi_def_cfa_register 28
 473               	/* prologue: function */
 474               	/* frame size = 1 */
 475               	/* stack size = 3 */
 476               	.L__stack_usage = 3
 238:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 477               		.loc 1 238 0
 478 01a0 8091 0000 		lds r24,num_commands
 479               	.LVL53:
 480 01a4 8983      		std Y+1,r24
 239:.././simpleserial/simpleserial.c ****     return 0x00;
 481               		.loc 1 239 0
 482 01a6 AE01      		movw r20,r28
 483 01a8 4F5F      		subi r20,-1
 484 01aa 5F4F      		sbci r21,-1
 485 01ac 61E0      		ldi r22,lo8(1)
 486               	.LVL54:
 487 01ae 82E7      		ldi r24,lo8(114)
 488 01b0 0E94 0000 		call simpleserial_put
 489               	.LVL55:
 241:.././simpleserial/simpleserial.c **** 
 490               		.loc 1 241 0
 491 01b4 80E0      		ldi r24,0
 492               	/* epilogue start */
 493 01b6 0F90      		pop __tmp_reg__
 494 01b8 DF91      		pop r29
 495 01ba CF91      		pop r28
 496 01bc 0895      		ret
 497               		.cfi_endproc
 498               	.LFE13:
 500               	.global	ss_get_commands
 502               	ss_get_commands:
 503               	.LFB14:
 250:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 504               		.loc 1 250 0
 505               		.cfi_startproc
 506               	.LVL56:
 507 01be CF93      		push r28
 508               	.LCFI12:
 509               		.cfi_def_cfa_offset 4
 510               		.cfi_offset 28, -3
 511 01c0 DF93      		push r29
 512               	.LCFI13:
 513               		.cfi_def_cfa_offset 5
 514               		.cfi_offset 29, -4
 515 01c2 CDB7      		in r28,__SP_L__
 516 01c4 DEB7      		in r29,__SP_H__
 517               	.LCFI14:
 518               		.cfi_def_cfa_register 28
 519 01c6 E097      		sbiw r28,48
 520               	.LCFI15:
 521               		.cfi_def_cfa_offset 53
 522 01c8 CDBF      		out __SP_L__,r28
 523 01ca DEBF      		out __SP_H__,r29
 524               	/* prologue: function */
 525               	/* frame size = 48 */
 526               	/* stack size = 50 */
 527               	.L__stack_usage = 50
 528               	.LVL57:
 529               	.LBB5:
 252:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 530               		.loc 1 252 0
 531 01cc 6091 0000 		lds r22,num_commands
 532 01d0 7091 0000 		lds r23,num_commands+1
 533               	.LVL58:
 534 01d4 AB01      		movw r20,r22
 535 01d6 5527      		clr r21
 536 01d8 20E0      		ldi r18,0
 253:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 537               		.loc 1 253 0
 538 01da 36E0      		ldi r19,lo8(6)
 539               	.LVL59:
 540               	.L39:
 252:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 541               		.loc 1 252 0 discriminator 1
 542 01dc 822F      		mov r24,r18
 543 01de 90E0      		ldi r25,0
 544 01e0 8417      		cp r24,r20
 545 01e2 9507      		cpc r25,r21
 546 01e4 04F4      		brge .L41
 253:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 547               		.loc 1 253 0 discriminator 3
 548 01e6 FC01      		movw r30,r24
 549 01e8 EE0F      		lsl r30
 550 01ea FF1F      		rol r31
 551 01ec E80F      		add r30,r24
 552 01ee F91F      		adc r31,r25
 553 01f0 A1E0      		ldi r26,lo8(1)
 554 01f2 B0E0      		ldi r27,0
 555 01f4 AC0F      		add r26,r28
 556 01f6 BD1F      		adc r27,r29
 557 01f8 EA0F      		add r30,r26
 558 01fa FB1F      		adc r31,r27
 559 01fc 389F      		mul r19,r24
 560 01fe D001      		movw r26,r0
 561 0200 399F      		mul r19,r25
 562 0202 B00D      		add r27,r0
 563 0204 1124      		clr __zero_reg__
 564 0206 A050      		subi r26,lo8(-(commands))
 565 0208 B040      		sbci r27,hi8(-(commands))
 566 020a 8C91      		ld r24,X
 567 020c 8083      		st Z,r24
 254:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 568               		.loc 1 254 0 discriminator 3
 569 020e 1196      		adiw r26,1
 570 0210 8C91      		ld r24,X
 571 0212 1197      		sbiw r26,1
 572 0214 8183      		std Z+1,r24
 255:.././simpleserial/simpleserial.c ****     }
 573               		.loc 1 255 0 discriminator 3
 574 0216 1596      		adiw r26,5
 575 0218 8C91      		ld r24,X
 576 021a 8283      		std Z+2,r24
 252:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 577               		.loc 1 252 0 discriminator 3
 578 021c 2F5F      		subi r18,lo8(-(1))
 579               	.LVL60:
 580 021e 00C0      		rjmp .L39
 581               	.L41:
 582               	.LBE5:
 258:.././simpleserial/simpleserial.c ****     return 0x00;
 583               		.loc 1 258 0
 584 0220 862F      		mov r24,r22
 585 0222 880F      		lsl r24
 586 0224 680F      		add r22,r24
 587 0226 AE01      		movw r20,r28
 588 0228 4F5F      		subi r20,-1
 589 022a 5F4F      		sbci r21,-1
 590 022c 82E7      		ldi r24,lo8(114)
 591 022e 0E94 0000 		call simpleserial_put
 592               	.LVL61:
 260:.././simpleserial/simpleserial.c **** 
 593               		.loc 1 260 0
 594 0232 80E0      		ldi r24,0
 595               	/* epilogue start */
 596 0234 E096      		adiw r28,48
 597 0236 CDBF      		out __SP_L__,r28
 598 0238 DEBF      		out __SP_H__,r29
 599 023a DF91      		pop r29
 600 023c CF91      		pop r28
 601 023e 0895      		ret
 602               		.cfi_endproc
 603               	.LFE14:
 605               	.global	simpleserial_get
 607               	simpleserial_get:
 608               	.LFB19:
 331:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 609               		.loc 1 331 0
 610               		.cfi_startproc
 611 0240 AF92      		push r10
 612               	.LCFI16:
 613               		.cfi_def_cfa_offset 4
 614               		.cfi_offset 10, -3
 615 0242 BF92      		push r11
 616               	.LCFI17:
 617               		.cfi_def_cfa_offset 5
 618               		.cfi_offset 11, -4
 619 0244 CF92      		push r12
 620               	.LCFI18:
 621               		.cfi_def_cfa_offset 6
 622               		.cfi_offset 12, -5
 623 0246 DF92      		push r13
 624               	.LCFI19:
 625               		.cfi_def_cfa_offset 7
 626               		.cfi_offset 13, -6
 627 0248 EF92      		push r14
 628               	.LCFI20:
 629               		.cfi_def_cfa_offset 8
 630               		.cfi_offset 14, -7
 631 024a FF92      		push r15
 632               	.LCFI21:
 633               		.cfi_def_cfa_offset 9
 634               		.cfi_offset 15, -8
 635 024c 0F93      		push r16
 636               	.LCFI22:
 637               		.cfi_def_cfa_offset 10
 638               		.cfi_offset 16, -9
 639 024e 1F93      		push r17
 640               	.LCFI23:
 641               		.cfi_def_cfa_offset 11
 642               		.cfi_offset 17, -10
 643 0250 CF93      		push r28
 644               	.LCFI24:
 645               		.cfi_def_cfa_offset 12
 646               		.cfi_offset 28, -11
 647 0252 DF93      		push r29
 648               	.LCFI25:
 649               		.cfi_def_cfa_offset 13
 650               		.cfi_offset 29, -12
 651 0254 CDB7      		in r28,__SP_L__
 652 0256 DEB7      		in r29,__SP_H__
 653               	.LCFI26:
 654               		.cfi_def_cfa_register 28
 655 0258 C154      		subi r28,65
 656 025a D240      		sbci r29,2
 657               	.LCFI27:
 658               		.cfi_def_cfa_offset 590
 659 025c CDBF      		out __SP_L__,r28
 660 025e DEBF      		out __SP_H__,r29
 661               	/* prologue: function */
 662               	/* frame size = 577 */
 663               	/* stack size = 587 */
 664               	.L__stack_usage = 587
 337:.././simpleserial/simpleserial.c **** 
 665               		.loc 1 337 0
 666 0260 0E94 0000 		call input_ch_0
 667               	.LVL62:
 340:.././simpleserial/simpleserial.c **** 	{
 668               		.loc 1 340 0
 669 0264 4091 0000 		lds r20,num_commands
 670 0268 5091 0000 		lds r21,num_commands+1
 671 026c 20E0      		ldi r18,lo8(commands)
 672 026e 30E0      		ldi r19,hi8(commands)
 673 0270 00E0      		ldi r16,0
 674 0272 10E0      		ldi r17,0
 675               	.LVL63:
 676               	.L43:
 340:.././simpleserial/simpleserial.c **** 	{
 677               		.loc 1 340 0 is_stmt 0 discriminator 1
 678 0274 0417      		cp r16,r20
 679 0276 1507      		cpc r17,r21
 680 0278 04F4      		brge .L65
 681 027a 2A5F      		subi r18,-6
 682 027c 3F4F      		sbci r19,-1
 342:.././simpleserial/simpleserial.c **** 			break;
 683               		.loc 1 342 0 is_stmt 1
 684 027e F901      		movw r30,r18
 685 0280 3697      		sbiw r30,6
 686 0282 9081      		ld r25,Z
 687 0284 8913      		cpse r24,r25
 688 0286 00C0      		rjmp .L44
 689               	.L49:
 351:.././simpleserial/simpleserial.c **** 	{
 690               		.loc 1 351 0
 691 0288 26E0      		ldi r18,lo8(6)
 692 028a 209F      		mul r18,r16
 693 028c C001      		movw r24,r0
 694 028e 219F      		mul r18,r17
 695 0290 900D      		add r25,r0
 696 0292 1124      		clr __zero_reg__
 697               	.LVL64:
 698 0294 9C01      		movw r18,r24
 699 0296 2050      		subi r18,lo8(-(commands))
 700 0298 3040      		sbci r19,hi8(-(commands))
 701 029a 6901      		movw r12,r18
 702 029c D901      		movw r26,r18
 703 029e 1596      		adiw r26,5
 704 02a0 8C91      		ld r24,X
 705 02a2 FE01      		movw r30,r28
 706 02a4 3196      		adiw r30,1
 707 02a6 7F01      		movw r14,r30
 708 02a8 80FF      		sbrs r24,0
 709 02aa 00C0      		rjmp .L46
 710 02ac 00C0      		rjmp .L66
 711               	.LVL65:
 712               	.L44:
 340:.././simpleserial/simpleserial.c **** 	{
 713               		.loc 1 340 0 discriminator 2
 714 02ae 0F5F      		subi r16,-1
 715 02b0 1F4F      		sbci r17,-1
 716               	.LVL66:
 717 02b2 00C0      		rjmp .L43
 718               	.L65:
 347:.././simpleserial/simpleserial.c **** 		return;
 719               		.loc 1 347 0
 720 02b4 0417      		cp r16,r20
 721 02b6 1507      		cpc r17,r21
 722 02b8 01F4      		brne .+2
 723 02ba 00C0      		rjmp .L42
 724 02bc 00C0      		rjmp .L49
 725               	.LVL67:
 726               	.L66:
 727               	.LBB6:
 353:.././simpleserial/simpleserial.c **** 		char buff[2];
 728               		.loc 1 353 0
 729 02be CF57      		subi r28,lo8(-385)
 730 02c0 DE4F      		sbci r29,hi8(-385)
 731 02c2 1882      		st Y,__zero_reg__
 732 02c4 C158      		subi r28,lo8(385)
 733 02c6 D140      		sbci r29,hi8(385)
 355:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 734               		.loc 1 355 0
 735 02c8 0E94 0000 		call input_ch_0
 736               	.LVL68:
 737 02cc 8983      		std Y+1,r24
 356:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 738               		.loc 1 356 0
 739 02ce 0E94 0000 		call input_ch_0
 740               	.LVL69:
 741 02d2 8A83      		std Y+2,r24
 357:.././simpleserial/simpleserial.c **** 			return;
 742               		.loc 1 357 0
 743 02d4 AE01      		movw r20,r28
 744 02d6 4F57      		subi r20,127
 745 02d8 5E4F      		sbci r21,-2
 746 02da B701      		movw r22,r14
 747 02dc 81E0      		ldi r24,lo8(1)
 748 02de 90E0      		ldi r25,0
 749 02e0 0E94 0000 		call hex_decode
 750               	.LVL70:
 751 02e4 892B      		or r24,r25
 752 02e6 01F0      		breq .+2
 753 02e8 00C0      		rjmp .L42
 359:.././simpleserial/simpleserial.c **** 	}
 754               		.loc 1 359 0
 755 02ea CF57      		subi r28,lo8(-385)
 756 02ec DE4F      		sbci r29,hi8(-385)
 757 02ee 8881      		ld r24,Y
 758 02f0 C158      		subi r28,lo8(385)
 759 02f2 D140      		sbci r29,hi8(385)
 760 02f4 90E0      		ldi r25,0
 761 02f6 D601      		movw r26,r12
 762 02f8 1196      		adiw r26,1
 763 02fa 8D93      		st X+,r24
 764 02fc 9C93      		st X,r25
 765 02fe 1297      		sbiw r26,1+1
 766               	.L46:
 767               	.LBE6:
 340:.././simpleserial/simpleserial.c **** 	{
 768               		.loc 1 340 0 discriminator 1
 769 0300 6701      		movw r12,r14
 770               	.LBB7:
 363:.././simpleserial/simpleserial.c **** 	{
 771               		.loc 1 363 0 discriminator 1
 772 0302 26E0      		ldi r18,lo8(6)
 773 0304 209F      		mul r18,r16
 774 0306 C001      		movw r24,r0
 775 0308 219F      		mul r18,r17
 776 030a 900D      		add r25,r0
 777 030c 1124      		clr __zero_reg__
 778 030e FC01      		movw r30,r24
 779 0310 E050      		subi r30,lo8(-(commands+1))
 780 0312 F040      		sbci r31,hi8(-(commands+1))
 781 0314 5F01      		movw r10,r30
 782               	.L51:
 783 0316 F501      		movw r30,r10
 784 0318 8081      		ld r24,Z
 785 031a 9181      		ldd r25,Z+1
 786 031c 880F      		lsl r24
 787 031e 991F      		rol r25
 788 0320 9601      		movw r18,r12
 789 0322 2E19      		sub r18,r14
 790 0324 3F09      		sbc r19,r15
 791 0326 2817      		cp r18,r24
 792 0328 3907      		cpc r19,r25
 793 032a 00F4      		brsh .L67
 365:.././simpleserial/simpleserial.c **** 
 794               		.loc 1 365 0
 795 032c 0E94 0000 		call input_ch_0
 796               	.LVL71:
 368:.././simpleserial/simpleserial.c **** 			return;
 797               		.loc 1 368 0
 798 0330 8A30      		cpi r24,lo8(10)
 799 0332 01F0      		breq .L42
 368:.././simpleserial/simpleserial.c **** 			return;
 800               		.loc 1 368 0 is_stmt 0 discriminator 1
 801 0334 8D30      		cpi r24,lo8(13)
 802 0336 01F0      		breq .L42
 371:.././simpleserial/simpleserial.c **** 	}
 803               		.loc 1 371 0 is_stmt 1 discriminator 2
 804 0338 D601      		movw r26,r12
 805 033a 8D93      		st X+,r24
 806 033c 6D01      		movw r12,r26
 807 033e 00C0      		rjmp .L51
 808               	.LVL72:
 809               	.L67:
 810               	.LBE7:
 375:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 811               		.loc 1 375 0
 812 0340 0E94 0000 		call input_ch_0
 813               	.LVL73:
 376:.././simpleserial/simpleserial.c **** 		return;
 814               		.loc 1 376 0
 815 0344 8A30      		cpi r24,lo8(10)
 816 0346 01F0      		breq .L54
 376:.././simpleserial/simpleserial.c **** 		return;
 817               		.loc 1 376 0 is_stmt 0 discriminator 1
 818 0348 8D30      		cpi r24,lo8(13)
 819 034a 01F4      		brne .L42
 820               	.L54:
 381:.././simpleserial/simpleserial.c **** 		return;
 821               		.loc 1 381 0 is_stmt 1
 822 034c 26E0      		ldi r18,lo8(6)
 823 034e 209F      		mul r18,r16
 824 0350 C001      		movw r24,r0
 825 0352 219F      		mul r18,r17
 826 0354 900D      		add r25,r0
 827 0356 1124      		clr __zero_reg__
 828               	.LVL74:
 829 0358 8C01      		movw r16,r24
 830               	.LVL75:
 831 035a 0050      		subi r16,lo8(-(commands))
 832 035c 1040      		sbci r17,hi8(-(commands))
 833 035e D801      		movw r26,r16
 834 0360 1196      		adiw r26,1
 835 0362 DC90      		ld r13,X
 836 0364 1197      		sbiw r26,1
 837 0366 AE01      		movw r20,r28
 838 0368 4F57      		subi r20,127
 839 036a 5E4F      		sbci r21,-2
 840 036c B701      		movw r22,r14
 841 036e 8D2D      		mov r24,r13
 842 0370 1296      		adiw r26,2
 843 0372 9C91      		ld r25,X
 844 0374 0E94 0000 		call hex_decode
 845               	.LVL76:
 846 0378 892B      		or r24,r25
 847 037a 01F4      		brne .L42
 386:.././simpleserial/simpleserial.c **** 
 848               		.loc 1 386 0
 849 037c D801      		movw r26,r16
 850 037e 1396      		adiw r26,3
 851 0380 ED91      		ld r30,X+
 852 0382 FC91      		ld r31,X
 853 0384 1497      		sbiw r26,3+1
 854 0386 6D2D      		mov r22,r13
 855 0388 CE01      		movw r24,r28
 856 038a 8F57      		subi r24,127
 857 038c 9E4F      		sbci r25,-2
 858 038e 1995      		eicall
 859               	.LVL77:
 860 0390 CF5B      		subi r28,lo8(-577)
 861 0392 DD4F      		sbci r29,hi8(-577)
 862 0394 8883      		st Y,r24
 863 0396 C154      		subi r28,lo8(577)
 864 0398 D240      		sbci r29,hi8(577)
 390:.././simpleserial/simpleserial.c **** #endif
 865               		.loc 1 390 0
 866 039a AE01      		movw r20,r28
 867 039c 4F5B      		subi r20,-65
 868 039e 5D4F      		sbci r21,-3
 869 03a0 61E0      		ldi r22,lo8(1)
 870 03a2 8AE7      		ldi r24,lo8(122)
 871 03a4 0E94 0000 		call simpleserial_put
 872               	.LVL78:
 873               	.L42:
 874               	/* epilogue start */
 392:.././simpleserial/simpleserial.c **** 
 875               		.loc 1 392 0
 876 03a8 CF5B      		subi r28,-65
 877 03aa DD4F      		sbci r29,-3
 878 03ac CDBF      		out __SP_L__,r28
 879 03ae DEBF      		out __SP_H__,r29
 880 03b0 DF91      		pop r29
 881 03b2 CF91      		pop r28
 882 03b4 1F91      		pop r17
 883 03b6 0F91      		pop r16
 884 03b8 FF90      		pop r15
 885 03ba EF90      		pop r14
 886 03bc DF90      		pop r13
 887 03be CF90      		pop r12
 888 03c0 BF90      		pop r11
 889 03c2 AF90      		pop r10
 890 03c4 0895      		ret
 891               		.cfi_endproc
 892               	.LFE19:
 894               		.section	.rodata
 897               	hex_lookup:
 898 0000 30        		.byte	48
 899 0001 31        		.byte	49
 900 0002 32        		.byte	50
 901 0003 33        		.byte	51
 902 0004 34        		.byte	52
 903 0005 35        		.byte	53
 904 0006 36        		.byte	54
 905 0007 37        		.byte	55
 906 0008 38        		.byte	56
 907 0009 39        		.byte	57
 908 000a 41        		.byte	65
 909 000b 42        		.byte	66
 910 000c 43        		.byte	67
 911 000d 44        		.byte	68
 912 000e 45        		.byte	69
 913 000f 46        		.byte	70
 914               		.local	commands
 915               		.comm	commands,96,1
 916               		.local	num_commands
 917               		.comm	num_commands,2,1
 918               		.text
 919               	.Letext0:
 920               		.file 2 "/usr/lib/avr/include/stdint.h"
 921               		.file 3 ".././hal/xmega/uart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial.c
     /tmp/ccv2vmU2.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccv2vmU2.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccv2vmU2.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccv2vmU2.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccv2vmU2.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/ccv2vmU2.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccv2vmU2.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccv2vmU2.s:14     .text:0000000000000000 check_version
     /tmp/ccv2vmU2.s:33     .text:0000000000000004 ss_crc
     /tmp/ccv2vmU2.s:93     .text:000000000000002c hex_decode
     /tmp/ccv2vmU2.s:230    .text:00000000000000b6 simpleserial_addcmd_flags
     /tmp/ccv2vmU2.s:915    .bss:0000000000000060 num_commands
                             .bss:0000000000000000 commands
     /tmp/ccv2vmU2.s:289    .text:00000000000000fc simpleserial_addcmd
     /tmp/ccv2vmU2.s:307    .text:0000000000000102 simpleserial_init
     /tmp/ccv2vmU2.s:502    .text:00000000000001be ss_get_commands
     /tmp/ccv2vmU2.s:453    .text:0000000000000196 ss_num_commands
     /tmp/ccv2vmU2.s:344    .text:000000000000012c simpleserial_put
     /tmp/ccv2vmU2.s:897    .rodata:0000000000000000 hex_lookup
     /tmp/ccv2vmU2.s:607    .text:0000000000000240 simpleserial_get

UNDEFINED SYMBOLS
output_ch_0
input_ch_0
__do_copy_data
__do_clear_bss
