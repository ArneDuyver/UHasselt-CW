   1               		.file	"simpleserial-aes.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	reset
  14               	reset:
  15               	.LFB14:
  16               		.file 1 "simpleserial-aes.c"
   1:simpleserial-aes.c **** /*
   2:simpleserial-aes.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-aes.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:simpleserial-aes.c **** 
   5:simpleserial-aes.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-aes.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-aes.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-aes.c ****     (at your option) any later version.
   9:simpleserial-aes.c **** 
  10:simpleserial-aes.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-aes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-aes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-aes.c ****     GNU General Public License for more details.
  14:simpleserial-aes.c **** 
  15:simpleserial-aes.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-aes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-aes.c **** */
  18:simpleserial-aes.c **** 
  19:simpleserial-aes.c **** #include "aes-independant.h"
  20:simpleserial-aes.c **** #include "hal.h"
  21:simpleserial-aes.c **** #include "simpleserial.h"
  22:simpleserial-aes.c **** #include <stdint.h>
  23:simpleserial-aes.c **** #include <stdlib.h>
  24:simpleserial-aes.c **** 
  25:simpleserial-aes.c **** //BEGIN EDIT
  26:simpleserial-aes.c ****     #include "./../crypto/avrcryptolib/aes/aes_sbox.h"
  27:simpleserial-aes.c ****     #include <avr/pgmspace.h>
  28:simpleserial-aes.c ****     //aes_sbox.h copy
  29:simpleserial-aes.c ****     uint8_t aes_sbox2[256];
  30:simpleserial-aes.c ****     uint8_t * rmask;
  31:simpleserial-aes.c **** //END EDIT
  32:simpleserial-aes.c **** 
  33:simpleserial-aes.c **** 
  34:simpleserial-aes.c **** uint8_t get_mask(uint8_t* m, uint8_t len)
  35:simpleserial-aes.c **** {
  36:simpleserial-aes.c ****   aes_indep_mask(m, len);
  37:simpleserial-aes.c ****   return 0x00;
  38:simpleserial-aes.c **** }
  39:simpleserial-aes.c **** 
  40:simpleserial-aes.c **** uint8_t get_key(uint8_t* k, uint8_t len)
  41:simpleserial-aes.c **** {
  42:simpleserial-aes.c **** 	aes_indep_key(k);
  43:simpleserial-aes.c **** 	return 0x00;
  44:simpleserial-aes.c **** }
  45:simpleserial-aes.c **** 
  46:simpleserial-aes.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
  47:simpleserial-aes.c **** {
  48:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
  49:simpleserial-aes.c ****     //START EDIT
  50:simpleserial-aes.c ****     // generate random mask uint8_t
  51:simpleserial-aes.c ****     *rmask = 0x55;//rand();
  52:simpleserial-aes.c ****     uint8_t mask = *rmask;
  53:simpleserial-aes.c ****     // xor every byte from *pt with random
  54:simpleserial-aes.c ****     uint8_t i;
  55:simpleserial-aes.c ****     for(i=0; i<16; ++i){
  56:simpleserial-aes.c ****         pt[i] ^= mask;
  57:simpleserial-aes.c **** 	}
  58:simpleserial-aes.c ****     // generate new SBOX using random
  59:simpleserial-aes.c ****     uint8_t l;
  60:simpleserial-aes.c ****     for(l=0; l<255; ++l){
  61:simpleserial-aes.c ****         uint8_t temporary = pgm_read_byte(aes_sbox+l);
  62:simpleserial-aes.c ****         aes_sbox2[l^mask] = temporary^mask;
  63:simpleserial-aes.c **** 	}   
  64:simpleserial-aes.c ****     //END EDIT
  65:simpleserial-aes.c **** 
  66:simpleserial-aes.c **** 	trigger_high();
  67:simpleserial-aes.c **** 
  68:simpleserial-aes.c ****   #ifdef ADD_JITTER
  69:simpleserial-aes.c ****   for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  70:simpleserial-aes.c ****   #endif
  71:simpleserial-aes.c **** 
  72:simpleserial-aes.c **** 	aes_indep_enc(pt,aes_sbox2,rmask); /* encrypting the data block */ //ADDED SBOX AND RMASK
  73:simpleserial-aes.c **** 	trigger_low();
  74:simpleserial-aes.c **** 
  75:simpleserial-aes.c ****     aes_indep_enc_posttrigger(pt);
  76:simpleserial-aes.c ****     //START EDIT
  77:simpleserial-aes.c ****     uint8_t j;
  78:simpleserial-aes.c ****     for(j=0; j<16; ++j){
  79:simpleserial-aes.c ****         pt[j] ^= mask;
  80:simpleserial-aes.c **** 	}
  81:simpleserial-aes.c ****     //END EDIT
  82:simpleserial-aes.c **** 
  83:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
  84:simpleserial-aes.c **** 	return 0x00;
  85:simpleserial-aes.c **** }
  86:simpleserial-aes.c **** 
  87:simpleserial-aes.c **** uint8_t reset(uint8_t* x, uint8_t len)
  88:simpleserial-aes.c **** {
  17               		.loc 1 88 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  89:simpleserial-aes.c ****     // Reset key here if needed
  90:simpleserial-aes.c **** 	return 0x00;
  91:simpleserial-aes.c **** }
  24               		.loc 1 91 0
  25 0000 80E0      		ldi r24,0
  26               	.LVL1:
  27 0002 0895      		ret
  28               		.cfi_endproc
  29               	.LFE14:
  31               	.global	enc_multi_setnum
  33               	enc_multi_setnum:
  34               	.LFB15:
  92:simpleserial-aes.c **** 
  93:simpleserial-aes.c **** static uint16_t num_encryption_rounds = 10;
  94:simpleserial-aes.c **** 
  95:simpleserial-aes.c **** 
  96:simpleserial-aes.c **** uint8_t enc_multi_setnum(uint8_t* t, uint8_t len)
  97:simpleserial-aes.c **** {
  35               		.loc 1 97 0
  36               		.cfi_startproc
  37               	.LVL2:
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  98:simpleserial-aes.c ****     //Assumes user entered a number like [0, 200] to mean "200"
  99:simpleserial-aes.c ****     //which is most sane looking for humans I think
 100:simpleserial-aes.c ****     num_encryption_rounds = t[1];
 101:simpleserial-aes.c ****     num_encryption_rounds |= t[0] << 8;
 102:simpleserial-aes.c ****     return 0;
 103:simpleserial-aes.c **** }
  42               		.loc 1 103 0
  43 0004 80E0      		ldi r24,0
  44               	.LVL3:
  45 0006 0895      		ret
  46               		.cfi_endproc
  47               	.LFE15:
  49               	.global	get_mask
  51               	get_mask:
  52               	.LFB11:
  35:simpleserial-aes.c ****   aes_indep_mask(m, len);
  53               		.loc 1 35 0
  54               		.cfi_startproc
  55               	.LVL4:
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  36:simpleserial-aes.c ****   return 0x00;
  60               		.loc 1 36 0
  61 0008 0E94 0000 		call aes_indep_mask
  62               	.LVL5:
  38:simpleserial-aes.c **** 
  63               		.loc 1 38 0
  64 000c 80E0      		ldi r24,0
  65 000e 0895      		ret
  66               		.cfi_endproc
  67               	.LFE11:
  69               	.global	get_key
  71               	get_key:
  72               	.LFB12:
  41:simpleserial-aes.c **** 	aes_indep_key(k);
  73               		.loc 1 41 0
  74               		.cfi_startproc
  75               	.LVL6:
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
  42:simpleserial-aes.c **** 	return 0x00;
  80               		.loc 1 42 0
  81 0010 0E94 0000 		call aes_indep_key
  82               	.LVL7:
  44:simpleserial-aes.c **** 
  83               		.loc 1 44 0
  84 0014 80E0      		ldi r24,0
  85 0016 0895      		ret
  86               		.cfi_endproc
  87               	.LFE12:
  89               	.global	get_pt
  91               	get_pt:
  92               	.LFB13:
  47:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
  93               		.loc 1 47 0
  94               		.cfi_startproc
  95               	.LVL8:
  96 0018 CF92      		push r12
  97               	.LCFI0:
  98               		.cfi_def_cfa_offset 4
  99               		.cfi_offset 12, -3
 100 001a DF92      		push r13
 101               	.LCFI1:
 102               		.cfi_def_cfa_offset 5
 103               		.cfi_offset 13, -4
 104 001c EF92      		push r14
 105               	.LCFI2:
 106               		.cfi_def_cfa_offset 6
 107               		.cfi_offset 14, -5
 108 001e FF92      		push r15
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 7
 111               		.cfi_offset 15, -6
 112 0020 0F93      		push r16
 113               	.LCFI4:
 114               		.cfi_def_cfa_offset 8
 115               		.cfi_offset 16, -7
 116 0022 1F93      		push r17
 117               	.LCFI5:
 118               		.cfi_def_cfa_offset 9
 119               		.cfi_offset 17, -8
 120 0024 CF93      		push r28
 121               	.LCFI6:
 122               		.cfi_def_cfa_offset 10
 123               		.cfi_offset 28, -9
 124 0026 DF93      		push r29
 125               	.LCFI7:
 126               		.cfi_def_cfa_offset 11
 127               		.cfi_offset 29, -10
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 8 */
 131               	.L__stack_usage = 8
 132 0028 EC01      		movw r28,r24
  48:simpleserial-aes.c ****     //START EDIT
 133               		.loc 1 48 0
 134 002a 0E94 0000 		call aes_indep_enc_pretrigger
 135               	.LVL9:
  51:simpleserial-aes.c ****     uint8_t mask = *rmask;
 136               		.loc 1 51 0
 137 002e E091 0000 		lds r30,rmask
 138 0032 F091 0000 		lds r31,rmask+1
 139 0036 85E5      		ldi r24,lo8(85)
 140 0038 8083      		st Z,r24
  52:simpleserial-aes.c ****     // xor every byte from *pt with random
 141               		.loc 1 52 0
 142 003a E091 0000 		lds r30,rmask
 143 003e F091 0000 		lds r31,rmask+1
 144 0042 F080      		ld r15,Z
 145               	.LVL10:
 146 0044 8E01      		movw r16,r28
 147 0046 6E01      		movw r12,r28
 148 0048 80E1      		ldi r24,16
 149 004a C80E      		add r12,r24
 150 004c D11C      		adc r13,__zero_reg__
 151 004e FE01      		movw r30,r28
 152               	.LVL11:
 153               	.L6:
  56:simpleserial-aes.c **** 	}
 154               		.loc 1 56 0 discriminator 3
 155 0050 8081      		ld r24,Z
 156 0052 8F25      		eor r24,r15
 157 0054 8193      		st Z+,r24
 158               	.LVL12:
  55:simpleserial-aes.c ****         pt[i] ^= mask;
 159               		.loc 1 55 0 discriminator 3
 160 0056 CE16      		cp r12,r30
 161 0058 DF06      		cpc r13,r31
 162 005a 01F4      		brne .L6
 163 005c E0E0      		ldi r30,lo8(aes_sbox)
 164 005e F0E0      		ldi r31,hi8(aes_sbox)
 165               	.LVL13:
  55:simpleserial-aes.c ****         pt[i] ^= mask;
 166               		.loc 1 55 0 is_stmt 0
 167 0060 80E0      		ldi r24,0
 168               	.L7:
 169               	.LVL14:
 170               	.LBB2:
 171               	.LBB3:
  61:simpleserial-aes.c ****         aes_sbox2[l^mask] = temporary^mask;
 172               		.loc 1 61 0 is_stmt 1 discriminator 3
 173               	/* #APP */
 174               	 ;  61 "simpleserial-aes.c" 1
 175 0062 9491      		lpm r25, Z
 176               		
 177               	 ;  0 "" 2
 178               	.LVL15:
 179               	/* #NOAPP */
 180               	.LBE3:
  62:simpleserial-aes.c **** 	}   
 181               		.loc 1 62 0 discriminator 3
 182 0064 AF2D      		mov r26,r15
 183 0066 A827      		eor r26,r24
 184 0068 B0E0      		ldi r27,0
 185 006a A050      		subi r26,lo8(-(aes_sbox2))
 186 006c B040      		sbci r27,hi8(-(aes_sbox2))
 187 006e 9F25      		eor r25,r15
 188               	.LVL16:
 189 0070 9C93      		st X,r25
 190               	.LBE2:
  60:simpleserial-aes.c ****         uint8_t temporary = pgm_read_byte(aes_sbox+l);
 191               		.loc 1 60 0 discriminator 3
 192 0072 8F5F      		subi r24,lo8(-(1))
 193               	.LVL17:
 194 0074 3196      		adiw r30,1
 195               	.LVL18:
 196 0076 8F3F      		cpi r24,lo8(-1)
 197 0078 01F4      		brne .L7
  66:simpleserial-aes.c **** 
 198               		.loc 1 66 0
 199 007a EE24      		clr r14
 200 007c E394      		inc r14
 201 007e E092 0506 		sts 1541,r14
  72:simpleserial-aes.c **** 	trigger_low();
 202               		.loc 1 72 0
 203 0082 4091 0000 		lds r20,rmask
 204 0086 5091 0000 		lds r21,rmask+1
 205 008a 60E0      		ldi r22,lo8(aes_sbox2)
 206 008c 70E0      		ldi r23,hi8(aes_sbox2)
 207 008e CE01      		movw r24,r28
 208               	.LVL19:
 209 0090 0E94 0000 		call aes_indep_enc
 210               	.LVL20:
  73:simpleserial-aes.c **** 
 211               		.loc 1 73 0
 212 0094 E092 0606 		sts 1542,r14
  75:simpleserial-aes.c ****     //START EDIT
 213               		.loc 1 75 0
 214 0098 CE01      		movw r24,r28
 215 009a 0E94 0000 		call aes_indep_enc_posttrigger
 216               	.LVL21:
 217               	.L8:
  79:simpleserial-aes.c **** 	}
 218               		.loc 1 79 0 discriminator 3
 219 009e F801      		movw r30,r16
 220 00a0 8081      		ld r24,Z
 221 00a2 8F25      		eor r24,r15
 222 00a4 8193      		st Z+,r24
 223 00a6 8F01      		movw r16,r30
 224               	.LVL22:
  78:simpleserial-aes.c ****         pt[j] ^= mask;
 225               		.loc 1 78 0 discriminator 3
 226 00a8 EC15      		cp r30,r12
 227 00aa FD05      		cpc r31,r13
 228 00ac 01F4      		brne .L8
  83:simpleserial-aes.c **** 	return 0x00;
 229               		.loc 1 83 0
 230 00ae AE01      		movw r20,r28
 231 00b0 60E1      		ldi r22,lo8(16)
 232 00b2 82E7      		ldi r24,lo8(114)
 233 00b4 0E94 0000 		call simpleserial_put
 234               	.LVL23:
  85:simpleserial-aes.c **** 
 235               		.loc 1 85 0
 236 00b8 80E0      		ldi r24,0
 237               	/* epilogue start */
 238 00ba DF91      		pop r29
 239 00bc CF91      		pop r28
 240               	.LVL24:
 241 00be 1F91      		pop r17
 242 00c0 0F91      		pop r16
 243               	.LVL25:
 244 00c2 FF90      		pop r15
 245               	.LVL26:
 246 00c4 EF90      		pop r14
 247 00c6 DF90      		pop r13
 248 00c8 CF90      		pop r12
 249               	.LVL27:
 250 00ca 0895      		ret
 251               		.cfi_endproc
 252               	.LFE13:
 254               		.section	.rodata
 255               	.LC0:
 256 0000 2B        		.byte	43
 257 0001 7E        		.byte	126
 258 0002 15        		.byte	21
 259 0003 16        		.byte	22
 260 0004 28        		.byte	40
 261 0005 AE        		.byte	-82
 262 0006 D2        		.byte	-46
 263 0007 A6        		.byte	-90
 264 0008 AB        		.byte	-85
 265 0009 F7        		.byte	-9
 266 000a 15        		.byte	21
 267 000b 88        		.byte	-120
 268 000c 09        		.byte	9
 269 000d CF        		.byte	-49
 270 000e 4F        		.byte	79
 271 000f 3C        		.byte	60
 272               		.section	.text.startup,"ax",@progbits
 273               	.global	main
 275               	main:
 276               	.LFB16:
 104:simpleserial-aes.c **** 
 105:simpleserial-aes.c **** #if SS_VER == SS_VER_2_0
 106:simpleserial-aes.c **** uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
 107:simpleserial-aes.c **** {
 108:simpleserial-aes.c ****     uint8_t req_len = 0;
 109:simpleserial-aes.c ****     uint8_t err = 0;
 110:simpleserial-aes.c ****     uint8_t mask_len = 0;
 111:simpleserial-aes.c ****     if (scmd & 0x04) {
 112:simpleserial-aes.c ****         // Mask has variable length. First byte encodes the length
 113:simpleserial-aes.c ****         mask_len = buf[req_len];
 114:simpleserial-aes.c ****         req_len += 1 + mask_len;
 115:simpleserial-aes.c ****         if (req_len > len) {
 116:simpleserial-aes.c ****             return SS_ERR_LEN;
 117:simpleserial-aes.c ****         }
 118:simpleserial-aes.c ****         err = get_mask(buf + req_len - mask_len, mask_len);
 119:simpleserial-aes.c ****         if (err)
 120:simpleserial-aes.c ****             return err;
 121:simpleserial-aes.c ****     }
 122:simpleserial-aes.c **** 
 123:simpleserial-aes.c ****     if (scmd & 0x02) {
 124:simpleserial-aes.c ****         req_len += 16;
 125:simpleserial-aes.c ****         if (req_len > len) {
 126:simpleserial-aes.c ****             return SS_ERR_LEN;
 127:simpleserial-aes.c ****         }
 128:simpleserial-aes.c ****         err = get_key(buf + req_len - 16, 16);
 129:simpleserial-aes.c ****         if (err)
 130:simpleserial-aes.c ****             return err;
 131:simpleserial-aes.c ****     }
 132:simpleserial-aes.c ****     if (scmd & 0x01) {
 133:simpleserial-aes.c ****         req_len += 16;
 134:simpleserial-aes.c ****         if (req_len > len) {
 135:simpleserial-aes.c ****             return SS_ERR_LEN;
 136:simpleserial-aes.c ****         }
 137:simpleserial-aes.c ****         err = get_pt(buf + req_len - 16, 16);
 138:simpleserial-aes.c ****         if (err)
 139:simpleserial-aes.c ****             return err;
 140:simpleserial-aes.c ****     }
 141:simpleserial-aes.c **** 
 142:simpleserial-aes.c ****     if (len != req_len) {
 143:simpleserial-aes.c ****         return SS_ERR_LEN;
 144:simpleserial-aes.c ****     }
 145:simpleserial-aes.c **** 
 146:simpleserial-aes.c ****     return 0x00;
 147:simpleserial-aes.c **** 
 148:simpleserial-aes.c **** }
 149:simpleserial-aes.c **** #endif
 150:simpleserial-aes.c **** 
 151:simpleserial-aes.c **** int main(void)
 152:simpleserial-aes.c **** {
 277               		.loc 1 152 0
 278               		.cfi_startproc
 279 0000 CF93      		push r28
 280               	.LCFI8:
 281               		.cfi_def_cfa_offset 4
 282               		.cfi_offset 28, -3
 283 0002 DF93      		push r29
 284               	.LCFI9:
 285               		.cfi_def_cfa_offset 5
 286               		.cfi_offset 29, -4
 287 0004 CDB7      		in r28,__SP_L__
 288 0006 DEB7      		in r29,__SP_H__
 289               	.LCFI10:
 290               		.cfi_def_cfa_register 28
 291 0008 6097      		sbiw r28,16
 292               	.LCFI11:
 293               		.cfi_def_cfa_offset 21
 294 000a CDBF      		out __SP_L__,r28
 295 000c DEBF      		out __SP_H__,r29
 296               	/* prologue: function */
 297               	/* frame size = 16 */
 298               	/* stack size = 18 */
 299               	.L__stack_usage = 18
 153:simpleserial-aes.c **** 	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 300               		.loc 1 153 0
 301 000e 80E1      		ldi r24,lo8(16)
 302 0010 E0E0      		ldi r30,lo8(.LC0)
 303 0012 F0E0      		ldi r31,hi8(.LC0)
 304 0014 DE01      		movw r26,r28
 305 0016 1196      		adiw r26,1
 306               		0:
 307 0018 0190      		ld r0,Z+
 308 001a 0D92      		st X+,r0
 309 001c 8A95      		dec r24
 310 001e 01F4      		brne 0b
 154:simpleserial-aes.c **** 
 155:simpleserial-aes.c ****     platform_init();
 311               		.loc 1 155 0
 312 0020 0E94 0000 		call platform_init
 313               	.LVL28:
 156:simpleserial-aes.c ****     init_uart();
 314               		.loc 1 156 0
 315 0024 0E94 0000 		call init_uart0
 316               	.LVL29:
 157:simpleserial-aes.c ****     trigger_setup();
 317               		.loc 1 157 0
 318 0028 81E0      		ldi r24,lo8(1)
 319 002a 8093 0106 		sts 1537,r24
 158:simpleserial-aes.c **** 
 159:simpleserial-aes.c **** 	aes_indep_init();
 320               		.loc 1 159 0
 321 002e 0E94 0000 		call aes_indep_init
 322               	.LVL30:
 160:simpleserial-aes.c **** 	aes_indep_key(tmp);
 323               		.loc 1 160 0
 324 0032 CE01      		movw r24,r28
 325 0034 0196      		adiw r24,1
 326 0036 0E94 0000 		call aes_indep_key
 327               	.LVL31:
 161:simpleserial-aes.c **** 
 162:simpleserial-aes.c ****     /* Uncomment this to get a HELLO message for debug */
 163:simpleserial-aes.c **** 
 164:simpleserial-aes.c **** /*
 165:simpleserial-aes.c ****     putch('h');
 166:simpleserial-aes.c ****     putch('e');
 167:simpleserial-aes.c ****     putch('l');
 168:simpleserial-aes.c ****     putch('l');
 169:simpleserial-aes.c ****     putch('o');
 170:simpleserial-aes.c ****     putch('\n');
 171:simpleserial-aes.c ****     */
 172:simpleserial-aes.c **** 
 173:simpleserial-aes.c **** 	simpleserial_init();
 328               		.loc 1 173 0
 329 003a 0E94 0000 		call simpleserial_init
 330               	.LVL32:
 174:simpleserial-aes.c ****     #if SS_VER == SS_VER_2_0
 175:simpleserial-aes.c ****     simpleserial_addcmd(0x01, 16, aes);
 176:simpleserial-aes.c ****     #else
 177:simpleserial-aes.c ****     simpleserial_addcmd('k', 16, get_key);
 331               		.loc 1 177 0
 332 003e 40E0      		ldi r20,lo8(gs(get_key))
 333 0040 50E0      		ldi r21,hi8(gs(get_key))
 334 0042 60E1      		ldi r22,lo8(16)
 335 0044 70E0      		ldi r23,0
 336 0046 8BE6      		ldi r24,lo8(107)
 337 0048 0E94 0000 		call simpleserial_addcmd
 338               	.LVL33:
 178:simpleserial-aes.c ****     simpleserial_addcmd('p', 16,  get_pt);
 339               		.loc 1 178 0
 340 004c 40E0      		ldi r20,lo8(gs(get_pt))
 341 004e 50E0      		ldi r21,hi8(gs(get_pt))
 342 0050 60E1      		ldi r22,lo8(16)
 343 0052 70E0      		ldi r23,0
 344 0054 80E7      		ldi r24,lo8(112)
 345 0056 0E94 0000 		call simpleserial_addcmd
 346               	.LVL34:
 179:simpleserial-aes.c ****     simpleserial_addcmd('x',  0,   reset);
 347               		.loc 1 179 0
 348 005a 40E0      		ldi r20,lo8(gs(reset))
 349 005c 50E0      		ldi r21,hi8(gs(reset))
 350 005e 60E0      		ldi r22,0
 351 0060 70E0      		ldi r23,0
 352 0062 88E7      		ldi r24,lo8(120)
 353 0064 0E94 0000 		call simpleserial_addcmd
 354               	.LVL35:
 180:simpleserial-aes.c ****     simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 355               		.loc 1 180 0
 356 0068 21E0      		ldi r18,lo8(1)
 357 006a 40E0      		ldi r20,lo8(gs(get_mask))
 358 006c 50E0      		ldi r21,hi8(gs(get_mask))
 359 006e 62E1      		ldi r22,lo8(18)
 360 0070 70E0      		ldi r23,0
 361 0072 8DE6      		ldi r24,lo8(109)
 362 0074 0E94 0000 		call simpleserial_addcmd_flags
 363               	.LVL36:
 181:simpleserial-aes.c ****     simpleserial_addcmd('s', 2, enc_multi_setnum);
 364               		.loc 1 181 0
 365 0078 40E0      		ldi r20,lo8(gs(enc_multi_setnum))
 366 007a 50E0      		ldi r21,hi8(gs(enc_multi_setnum))
 367 007c 62E0      		ldi r22,lo8(2)
 368 007e 70E0      		ldi r23,0
 369 0080 83E7      		ldi r24,lo8(115)
 370 0082 0E94 0000 		call simpleserial_addcmd
 371               	.LVL37:
 372               	.L14:
 182:simpleserial-aes.c ****     #endif
 183:simpleserial-aes.c ****     while(1)
 184:simpleserial-aes.c ****         simpleserial_get();
 373               		.loc 1 184 0 discriminator 1
 374 0086 0E94 0000 		call simpleserial_get
 375               	.LVL38:
 376 008a 00C0      		rjmp .L14
 377               		.cfi_endproc
 378               	.LFE16:
 380               		.comm	rmask,2,1
 381               		.comm	aes_sbox2,256,1
 382               		.text
 383               	.Letext0:
 384               		.file 2 "/usr/lib/avr/include/stdint.h"
 385               		.file 3 "/usr/lib/avr/include/avr/iox128d3.h"
 386               		.file 4 "./../crypto/avrcryptolib/aes/aes_sbox.h"
 387               		.file 5 ".././crypto/aes-independant.h"
 388               		.file 6 ".././simpleserial/simpleserial.h"
 389               		.file 7 ".././hal/hal.h"
 390               		.file 8 ".././hal/xmega/uart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial-aes.c
     /tmp/cccOM8cz.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cccOM8cz.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cccOM8cz.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cccOM8cz.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cccOM8cz.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/cccOM8cz.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cccOM8cz.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/cccOM8cz.s:14     .text:0000000000000000 reset
     /tmp/cccOM8cz.s:33     .text:0000000000000004 enc_multi_setnum
     /tmp/cccOM8cz.s:51     .text:0000000000000008 get_mask
     /tmp/cccOM8cz.s:71     .text:0000000000000010 get_key
     /tmp/cccOM8cz.s:91     .text:0000000000000018 get_pt
                            *COM*:0000000000000002 rmask
                            *COM*:0000000000000100 aes_sbox2
     /tmp/cccOM8cz.s:275    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
aes_indep_mask
aes_indep_key
aes_indep_enc_pretrigger
aes_sbox
aes_indep_enc
aes_indep_enc_posttrigger
simpleserial_put
platform_init
init_uart0
aes_indep_init
simpleserial_init
simpleserial_addcmd
simpleserial_addcmd_flags
simpleserial_get
__do_copy_data
__do_clear_bss
