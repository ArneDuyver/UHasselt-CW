
simpleserial-aes-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  00000eae  00000f42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000214  00802020  00802020  00000f62  2**0
                  ALLOC
  3 .stab         000000c0  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000003f  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000140  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004989  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002dd0  00000000  00000000  00005b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000eb7  00000000  00000000  0000894d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000564  00000000  00000000  00009804  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002165  00000000  00000000  00009d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000183a  00000000  00000000  0000becd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  0000d707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__ctors_end>
   4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
   8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
   c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  10:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  14:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  18:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  1c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  20:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  24:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  28:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  2c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  30:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  34:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  38:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  3c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  40:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  44:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  48:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  4c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  50:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  54:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  58:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  5c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  60:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  64:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  68:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  6c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  70:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  74:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  78:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  7c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  80:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  84:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  88:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  8c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  90:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  94:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  98:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  9c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  a0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  a4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  a8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  ac:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  b0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  b4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  b8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  bc:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  c0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  c4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  c8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  cc:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  d0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  d4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  d8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  dc:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  e0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  e4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  e8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  ec:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  f0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  f4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  f8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
  fc:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 100:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 104:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 108:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 10c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 110:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 114:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 118:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 11c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 120:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 124:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 128:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 12c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 130:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 134:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 138:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 13c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 140:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 144:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 148:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 14c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 150:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 154:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 158:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 15c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 160:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 164:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 168:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 16c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 170:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 174:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 178:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 17c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 180:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 184:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 188:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 18c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 190:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 194:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 198:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 19c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1a0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1a4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1a8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1ac:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1b0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1b4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1b8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1bc:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1c0:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>
 1c4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 a4 01 	jmp	0x348	; 0x348 <get_key>
 1cc:	0c 94 9c 01 	jmp	0x338	; 0x338 <reset>
 1d0:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <ss_num_commands>
 1d4:	0c 94 a0 01 	jmp	0x340	; 0x340 <get_mask>
 1d8:	0c 94 a8 01 	jmp	0x350	; 0x350 <get_pt>
 1dc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <enc_multi_setnum>
 1e0:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <ss_get_commands>
 1e4:	0c 94 07 02 	jmp	0x40e	; 0x40e <check_version>

000001e8 <__trampolines_end>:
 1e8:	01 02       	muls	r16, r17
 1ea:	04 08       	sbc	r0, r4
 1ec:	10 20       	and	r1, r0
 1ee:	40 80       	ld	r4, Z
 1f0:	1b 36       	cpi	r17, 0x6B	; 107

000001f2 <aes_sbox>:
 1f2:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
 202:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
 212:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
 222:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
 232:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
 242:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
 252:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
 262:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
 272:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
 282:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
 292:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
 2a2:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
 2b2:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
 2c2:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
 2d2:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
 2e2:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

000002f2 <__ctors_end>:
 2f2:	11 24       	eor	r1, r1
 2f4:	1f be       	out	0x3f, r1	; 63
 2f6:	cf ef       	ldi	r28, 0xFF	; 255
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df e3       	ldi	r29, 0x3F	; 63
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	0c bf       	out	0x3c, r16	; 60

00000302 <__do_copy_data>:
 302:	10 e2       	ldi	r17, 0x20	; 32
 304:	a0 e0       	ldi	r26, 0x00	; 0
 306:	b0 e2       	ldi	r27, 0x20	; 32
 308:	ee ea       	ldi	r30, 0xAE	; 174
 30a:	fe e0       	ldi	r31, 0x0E	; 14
 30c:	00 e0       	ldi	r16, 0x00	; 0
 30e:	0b bf       	out	0x3b, r16	; 59
 310:	02 c0       	rjmp	.+4      	; 0x316 <__do_copy_data+0x14>
 312:	07 90       	elpm	r0, Z+
 314:	0d 92       	st	X+, r0
 316:	a0 32       	cpi	r26, 0x20	; 32
 318:	b1 07       	cpc	r27, r17
 31a:	d9 f7       	brne	.-10     	; 0x312 <__do_copy_data+0x10>

0000031c <__do_clear_bss>:
 31c:	22 e2       	ldi	r18, 0x22	; 34
 31e:	a0 e2       	ldi	r26, 0x20	; 32
 320:	b0 e2       	ldi	r27, 0x20	; 32
 322:	01 c0       	rjmp	.+2      	; 0x326 <.do_clear_bss_start>

00000324 <.do_clear_bss_loop>:
 324:	1d 92       	st	X+, r1

00000326 <.do_clear_bss_start>:
 326:	a4 33       	cpi	r26, 0x34	; 52
 328:	b2 07       	cpc	r27, r18
 32a:	e1 f7       	brne	.-8      	; 0x324 <.do_clear_bss_loop>
 32c:	0e 94 06 07 	call	0xe0c	; 0xe0c <main>
 330:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <_exit>

00000334 <__bad_interrupt>:
 334:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000338 <reset>:

uint8_t reset(uint8_t* x, uint8_t len)
{
    // Reset key here if needed
	return 0x00;
}
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret

0000033c <enc_multi_setnum>:
    //Assumes user entered a number like [0, 200] to mean "200"
    //which is most sane looking for humans I think
    num_encryption_rounds = t[1];
    num_encryption_rounds |= t[0] << 8;
    return 0;
}
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret

00000340 <get_mask>:
//END EDIT


uint8_t get_mask(uint8_t* m, uint8_t len)
{
  aes_indep_mask(m, len);
 340:	0e 94 de 04 	call	0x9bc	; 0x9bc <aes_indep_mask>
  return 0x00;
}
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret

00000348 <get_key>:

uint8_t get_key(uint8_t* k, uint8_t len)
{
	aes_indep_key(k);
 348:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <aes_indep_key>
	return 0x00;
}
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret

00000350 <get_pt>:

uint8_t get_pt(uint8_t* pt, uint8_t len)
{
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
    aes_indep_enc_pretrigger(pt);
 362:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <aes_indep_enc_pretrigger>
    //START EDIT
    // generate random mask uint8_t
    *rmask = 0x55; //rand();
 366:	e0 91 82 21 	lds	r30, 0x2182	; 0x802182 <rmask>
 36a:	f0 91 83 21 	lds	r31, 0x2183	; 0x802183 <rmask+0x1>
 36e:	85 e5       	ldi	r24, 0x55	; 85
 370:	80 83       	st	Z, r24
    uint8_t mask = *rmask;
 372:	e0 91 82 21 	lds	r30, 0x2182	; 0x802182 <rmask>
 376:	f0 91 83 21 	lds	r31, 0x2183	; 0x802183 <rmask+0x1>
 37a:	d0 80       	ld	r13, Z
 37c:	8e 01       	movw	r16, r28
 37e:	7e 01       	movw	r14, r28
 380:	40 e1       	ldi	r20, 0x10	; 16
 382:	e4 0e       	add	r14, r20
 384:	f1 1c       	adc	r15, r1
 386:	fe 01       	movw	r30, r28
    // xor every byte from *pt with random
    uint8_t i;
    for(i=0; i<16; ++i){
        pt[i] ^= mask;
 388:	80 81       	ld	r24, Z
 38a:	8d 25       	eor	r24, r13
 38c:	81 93       	st	Z+, r24
    // generate random mask uint8_t
    *rmask = 0x55; //rand();
    uint8_t mask = *rmask;
    // xor every byte from *pt with random
    uint8_t i;
    for(i=0; i<16; ++i){
 38e:	ee 16       	cp	r14, r30
 390:	ff 06       	cpc	r15, r31
 392:	d1 f7       	brne	.-12     	; 0x388 <get_pt+0x38>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
	}
    // generate new SBOX using random
    int l;
    for(l=0x00; l<=0xFF; l++){
        uint8_t temporary = pgm_read_byte(aes_sbox+l);
        aes_sbox2[l^mask] = temporary^mask;
 398:	2d 2d       	mov	r18, r13
 39a:	30 e0       	ldi	r19, 0x00	; 0
        pt[i] ^= mask;
	}
    // generate new SBOX using random
    int l;
    for(l=0x00; l<=0xFF; l++){
        uint8_t temporary = pgm_read_byte(aes_sbox+l);
 39c:	fc 01       	movw	r30, r24
 39e:	ee 50       	subi	r30, 0x0E	; 14
 3a0:	fe 4f       	sbci	r31, 0xFE	; 254
 3a2:	e4 91       	lpm	r30, Z
        aes_sbox2[l^mask] = temporary^mask;
 3a4:	d9 01       	movw	r26, r18
 3a6:	a8 27       	eor	r26, r24
 3a8:	b9 27       	eor	r27, r25
 3aa:	ae 57       	subi	r26, 0x7E	; 126
 3ac:	bf 4d       	sbci	r27, 0xDF	; 223
 3ae:	ed 25       	eor	r30, r13
 3b0:	ec 93       	st	X, r30
    for(i=0; i<16; ++i){
        pt[i] ^= mask;
	}
    // generate new SBOX using random
    int l;
    for(l=0x00; l<=0xFF; l++){
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	81 15       	cp	r24, r1
 3b6:	e1 e0       	ldi	r30, 0x01	; 1
 3b8:	9e 07       	cpc	r25, r30
 3ba:	81 f7       	brne	.-32     	; 0x39c <get_pt+0x4c>
        uint8_t temporary = pgm_read_byte(aes_sbox+l);
        aes_sbox2[l^mask] = temporary^mask;
	}   
    //END EDIT

	trigger_high();
 3bc:	cc 24       	eor	r12, r12
 3be:	c3 94       	inc	r12
 3c0:	c0 92 05 06 	sts	0x0605, r12	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>

  #ifdef ADD_JITTER
  for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  #endif

	aes_indep_enc(pt,aes_sbox2,rmask); /* encrypting the data block */ //ADDED SBOX AND RMASK
 3c4:	40 91 82 21 	lds	r20, 0x2182	; 0x802182 <rmask>
 3c8:	50 91 83 21 	lds	r21, 0x2183	; 0x802183 <rmask+0x1>
 3cc:	62 e8       	ldi	r22, 0x82	; 130
 3ce:	70 e2       	ldi	r23, 0x20	; 32
 3d0:	ce 01       	movw	r24, r28
 3d2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <aes_indep_enc>
	trigger_low();
 3d6:	c0 92 06 06 	sts	0x0606, r12	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

    aes_indep_enc_posttrigger(pt);
 3da:	ce 01       	movw	r24, r28
 3dc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <aes_indep_enc_posttrigger>
    //START EDIT
    uint8_t j;
    for(j=0; j<16; ++j){
        pt[j] ^= mask;
 3e0:	f8 01       	movw	r30, r16
 3e2:	80 81       	ld	r24, Z
 3e4:	8d 25       	eor	r24, r13
 3e6:	81 93       	st	Z+, r24
 3e8:	8f 01       	movw	r16, r30
	trigger_low();

    aes_indep_enc_posttrigger(pt);
    //START EDIT
    uint8_t j;
    for(j=0; j<16; ++j){
 3ea:	ee 15       	cp	r30, r14
 3ec:	ff 05       	cpc	r31, r15
 3ee:	c1 f7       	brne	.-16     	; 0x3e0 <get_pt+0x90>
        pt[j] ^= mask;
	}
    //END EDIT

	simpleserial_put('r', 16, pt);
 3f0:	ae 01       	movw	r20, r28
 3f2:	60 e1       	ldi	r22, 0x10	; 16
 3f4:	82 e7       	ldi	r24, 0x72	; 114
 3f6:	0e 94 9d 02 	call	0x53a	; 0x53a <simpleserial_put>
	return 0x00;
}
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	08 95       	ret

0000040e <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret

00000412 <ss_crc>:
//#define SS_VER_2_0 2


#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 412:	fc 01       	movw	r30, r24
	unsigned int k = 0;
	uint8_t crc = 0x00;
 414:	80 e0       	ldi	r24, 0x00	; 0
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 416:	96 ea       	ldi	r25, 0xA6	; 166
#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 418:	61 50       	subi	r22, 0x01	; 1
 41a:	70 f0       	brcs	.+28     	; 0x438 <ss_crc+0x26>
		crc ^= *buf++;
 41c:	21 91       	ld	r18, Z+
 41e:	82 27       	eor	r24, r18
 420:	28 e0       	ldi	r18, 0x08	; 8
 422:	30 e0       	ldi	r19, 0x00	; 0
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 424:	87 ff       	sbrs	r24, 7
 426:	03 c0       	rjmp	.+6      	; 0x42e <ss_crc+0x1c>
 428:	88 0f       	add	r24, r24
 42a:	89 27       	eor	r24, r25
 42c:	01 c0       	rjmp	.+2      	; 0x430 <ss_crc+0x1e>
 42e:	88 0f       	add	r24, r24
 430:	21 50       	subi	r18, 0x01	; 1
 432:	31 09       	sbc	r19, r1
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
 434:	b9 f7       	brne	.-18     	; 0x424 <ss_crc+0x12>
 436:	f0 cf       	rjmp	.-32     	; 0x418 <ss_crc+0x6>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
		}
	}
	return crc;

}
 438:	08 95       	ret

0000043a <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 43a:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
 43c:	fa 01       	movw	r30, r20
 43e:	9f 01       	movw	r18, r30
 440:	24 1b       	sub	r18, r20
 442:	35 0b       	sbc	r19, r21
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	d4 f5       	brge	.+116    	; 0x4be <hex_decode+0x84>
	{
		char n_hi = ascii_buf[2*i];
 44a:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
 44c:	11 96       	adiw	r26, 0x01	; 1
 44e:	3c 91       	ld	r19, X
 450:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
 452:	60 ed       	ldi	r22, 0xD0	; 208
 454:	63 0f       	add	r22, r19
 456:	6a 30       	cpi	r22, 0x0A	; 10
 458:	10 f4       	brcc	.+4      	; 0x45e <hex_decode+0x24>
			data_buf[i] = n_lo - '0';
 45a:	60 83       	st	Z, r22
 45c:	0f c0       	rjmp	.+30     	; 0x47c <hex_decode+0x42>
		else if(n_lo >= 'A' && n_lo <= 'F')
 45e:	6f eb       	ldi	r22, 0xBF	; 191
 460:	63 0f       	add	r22, r19
 462:	66 30       	cpi	r22, 0x06	; 6
 464:	10 f4       	brcc	.+4      	; 0x46a <hex_decode+0x30>
			data_buf[i] = n_lo - 'A' + 10;
 466:	37 53       	subi	r19, 0x37	; 55
 468:	08 c0       	rjmp	.+16     	; 0x47a <hex_decode+0x40>
		else if(n_lo >= 'a' && n_lo <= 'f')
 46a:	6f e9       	ldi	r22, 0x9F	; 159
 46c:	63 0f       	add	r22, r19
 46e:	66 30       	cpi	r22, 0x06	; 6
 470:	18 f0       	brcs	.+6      	; 0x478 <hex_decode+0x3e>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 478:	37 55       	subi	r19, 0x57	; 87
 47a:	30 83       	st	Z, r19
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 47c:	30 ed       	ldi	r19, 0xD0	; 208
 47e:	32 0f       	add	r19, r18
 480:	3a 30       	cpi	r19, 0x0A	; 10
 482:	18 f4       	brcc	.+6      	; 0x48a <hex_decode+0x50>
			data_buf[i] |= (n_hi - '0') << 4;
 484:	22 95       	swap	r18
 486:	20 7f       	andi	r18, 0xF0	; 240
 488:	14 c0       	rjmp	.+40     	; 0x4b2 <hex_decode+0x78>
		else if(n_hi >= 'A' && n_hi <= 'F')
 48a:	3f eb       	ldi	r19, 0xBF	; 191
 48c:	32 0f       	add	r19, r18
 48e:	36 30       	cpi	r19, 0x06	; 6
 490:	20 f4       	brcc	.+8      	; 0x49a <hex_decode+0x60>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	27 53       	subi	r18, 0x37	; 55
 496:	31 09       	sbc	r19, r1
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <hex_decode+0x6e>
		else if(n_hi >= 'a' && n_hi <= 'f')
 49a:	3f e9       	ldi	r19, 0x9F	; 159
 49c:	32 0f       	add	r19, r18
 49e:	36 30       	cpi	r19, 0x06	; 6
 4a0:	40 f7       	brcc	.-48     	; 0x472 <hex_decode+0x38>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	27 55       	subi	r18, 0x57	; 87
 4a6:	31 09       	sbc	r19, r1
 4a8:	64 e0       	ldi	r22, 0x04	; 4
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
 4ae:	6a 95       	dec	r22
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <hex_decode+0x70>
 4b2:	30 81       	ld	r19, Z
 4b4:	23 2b       	or	r18, r19
 4b6:	20 83       	st	Z, r18
 4b8:	31 96       	adiw	r30, 0x01	; 1
 4ba:	12 96       	adiw	r26, 0x02	; 2
 4bc:	c0 cf       	rjmp	.-128    	; 0x43e <hex_decode+0x4>
		else
			return 1;
	}

	return 0;
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
}
 4c2:	08 95       	ret

000004c4 <simpleserial_addcmd_flags>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
 4c4:	a0 91 80 20 	lds	r26, 0x2080	; 0x802080 <num_commands>
 4c8:	b0 91 81 20 	lds	r27, 0x2081	; 0x802081 <num_commands+0x1>
 4cc:	a0 31       	cpi	r26, 0x10	; 16
 4ce:	b1 05       	cpc	r27, r1
 4d0:	cc f4       	brge	.+50     	; 0x504 <simpleserial_addcmd_flags+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
 4d2:	60 3c       	cpi	r22, 0xC0	; 192
 4d4:	71 05       	cpc	r23, r1
 4d6:	b0 f4       	brcc	.+44     	; 0x504 <simpleserial_addcmd_flags+0x40>
		return 1;

	commands[num_commands].c   = c;
 4d8:	96 e0       	ldi	r25, 0x06	; 6
 4da:	9a 9f       	mul	r25, r26
 4dc:	f0 01       	movw	r30, r0
 4de:	9b 9f       	mul	r25, r27
 4e0:	f0 0d       	add	r31, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	e0 5e       	subi	r30, 0xE0	; 224
 4e6:	ff 4d       	sbci	r31, 0xDF	; 223
 4e8:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 4ea:	61 83       	std	Z+1, r22	; 0x01
 4ec:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 4ee:	43 83       	std	Z+3, r20	; 0x03
 4f0:	54 83       	std	Z+4, r21	; 0x04
	commands[num_commands].flags = fl;
 4f2:	25 83       	std	Z+5, r18	; 0x05
	num_commands++;
 4f4:	11 96       	adiw	r26, 0x01	; 1
 4f6:	a0 93 80 20 	sts	0x2080, r26	; 0x802080 <num_commands>
 4fa:	b0 93 81 20 	sts	0x2081, r27	; 0x802081 <num_commands+0x1>

	return 0;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	08 95       	ret
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].fp  = fp;
	commands[num_commands].flags = fl;
	num_commands++;

	return 0;
}
 508:	08 95       	ret

0000050a <simpleserial_addcmd>:
    simpleserial_addcmd('y', 0, ss_num_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <simpleserial_addcmd_flags>

00000510 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 510:	47 e0       	ldi	r20, 0x07	; 7
 512:	52 e0       	ldi	r21, 0x02	; 2
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	86 e7       	ldi	r24, 0x76	; 118
 51a:	0e 94 85 02 	call	0x50a	; 0x50a <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 51e:	46 ee       	ldi	r20, 0xE6	; 230
 520:	52 e0       	ldi	r21, 0x02	; 2
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	87 e7       	ldi	r24, 0x77	; 119
 528:	0e 94 85 02 	call	0x50a	; 0x50a <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 52c:	42 ed       	ldi	r20, 0xD2	; 210
 52e:	52 e0       	ldi	r21, 0x02	; 2
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	89 e7       	ldi	r24, 0x79	; 121
 536:	0c 94 85 02 	jmp	0x50a	; 0x50a <simpleserial_addcmd>

0000053a <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	c6 2f       	mov	r28, r22
 54c:	8a 01       	movw	r16, r20
	// Write first character
	putch(c);
 54e:	0e 94 27 04 	call	0x84e	; 0x84e <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 552:	78 01       	movw	r14, r16
 554:	d0 e0       	ldi	r29, 0x00	; 0
 556:	c7 01       	movw	r24, r14
 558:	80 1b       	sub	r24, r16
 55a:	91 0b       	sbc	r25, r17
 55c:	8c 17       	cp	r24, r28
 55e:	9d 07       	cpc	r25, r29
 560:	b4 f4       	brge	.+44     	; 0x58e <simpleserial_put+0x54>
 562:	67 01       	movw	r12, r14
	{
		putch(hex_lookup[output[i] >> 4 ]);
 564:	d7 01       	movw	r26, r14
 566:	ed 91       	ld	r30, X+
 568:	7d 01       	movw	r14, r26
 56a:	e2 95       	swap	r30
 56c:	ef 70       	andi	r30, 0x0F	; 15
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	e0 5f       	subi	r30, 0xF0	; 240
 572:	ff 4d       	sbci	r31, 0xDF	; 223
 574:	80 81       	ld	r24, Z
 576:	0e 94 27 04 	call	0x84e	; 0x84e <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 57a:	d6 01       	movw	r26, r12
 57c:	ec 91       	ld	r30, X
 57e:	ef 70       	andi	r30, 0x0F	; 15
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	e0 5f       	subi	r30, 0xF0	; 240
 584:	ff 4d       	sbci	r31, 0xDF	; 223
 586:	80 81       	ld	r24, Z
 588:	0e 94 27 04 	call	0x84e	; 0x84e <output_ch_0>
 58c:	e4 cf       	rjmp	.-56     	; 0x556 <simpleserial_put+0x1c>
	}

	// Write trailing '\n'
	putch('\n');
 58e:	8a e0       	ldi	r24, 0x0A	; 10
}
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	df 90       	pop	r13
 59e:	cf 90       	pop	r12
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 5a0:	0c 94 27 04 	jmp	0x84e	; 0x84e <output_ch_0>

000005a4 <ss_num_commands>:
{
	return SS_VER;
}

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	1f 92       	push	r1
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
    uint8_t ncmds = num_commands & 0xFF;
 5ae:	80 91 80 20 	lds	r24, 0x2080	; 0x802080 <num_commands>
 5b2:	89 83       	std	Y+1, r24	; 0x01
    simpleserial_put('r', 0x01, &ncmds);
 5b4:	ae 01       	movw	r20, r28
 5b6:	4f 5f       	subi	r20, 0xFF	; 255
 5b8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ba:	61 e0       	ldi	r22, 0x01	; 1
 5bc:	82 e7       	ldi	r24, 0x72	; 114
 5be:	0e 94 9d 02 	call	0x53a	; 0x53a <simpleserial_put>
    return 0x00;
}
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0f 90       	pop	r0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	e0 97       	sbiw	r28, 0x30	; 48
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	de bf       	out	0x3e, r29	; 62
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 5da:	60 91 80 20 	lds	r22, 0x2080	; 0x802080 <num_commands>
 5de:	70 91 81 20 	lds	r23, 0x2081	; 0x802081 <num_commands+0x1>
 5e2:	ab 01       	movw	r20, r22
 5e4:	55 27       	eor	r21, r21
 5e6:	20 e0       	ldi	r18, 0x00	; 0
        repr_cmd_buf[i].c = commands[i].c;
 5e8:	36 e0       	ldi	r19, 0x06	; 6
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 5ea:	82 2f       	mov	r24, r18
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	84 17       	cp	r24, r20
 5f0:	95 07       	cpc	r25, r21
 5f2:	ec f4       	brge	.+58     	; 0x62e <ss_get_commands+0x62>
        repr_cmd_buf[i].c = commands[i].c;
 5f4:	fc 01       	movw	r30, r24
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	e8 0f       	add	r30, r24
 5fc:	f9 1f       	adc	r31, r25
 5fe:	a1 e0       	ldi	r26, 0x01	; 1
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	ac 0f       	add	r26, r28
 604:	bd 1f       	adc	r27, r29
 606:	ea 0f       	add	r30, r26
 608:	fb 1f       	adc	r31, r27
 60a:	38 9f       	mul	r19, r24
 60c:	d0 01       	movw	r26, r0
 60e:	39 9f       	mul	r19, r25
 610:	b0 0d       	add	r27, r0
 612:	11 24       	eor	r1, r1
 614:	a0 5e       	subi	r26, 0xE0	; 224
 616:	bf 4d       	sbci	r27, 0xDF	; 223
 618:	8c 91       	ld	r24, X
 61a:	80 83       	st	Z, r24
        repr_cmd_buf[i].len = commands[i].len;
 61c:	11 96       	adiw	r26, 0x01	; 1
 61e:	8c 91       	ld	r24, X
 620:	11 97       	sbiw	r26, 0x01	; 1
 622:	81 83       	std	Z+1, r24	; 0x01
        repr_cmd_buf[i].flags = commands[i].flags;
 624:	15 96       	adiw	r26, 0x05	; 5
 626:	8c 91       	ld	r24, X
 628:	82 83       	std	Z+2, r24	; 0x02
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 62a:	2f 5f       	subi	r18, 0xFF	; 255
 62c:	de cf       	rjmp	.-68     	; 0x5ea <ss_get_commands+0x1e>
        repr_cmd_buf[i].c = commands[i].c;
        repr_cmd_buf[i].len = commands[i].len;
        repr_cmd_buf[i].flags = commands[i].flags;
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 62e:	86 2f       	mov	r24, r22
 630:	88 0f       	add	r24, r24
 632:	68 0f       	add	r22, r24
 634:	ae 01       	movw	r20, r28
 636:	4f 5f       	subi	r20, 0xFF	; 255
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	82 e7       	ldi	r24, 0x72	; 114
 63c:	0e 94 9d 02 	call	0x53a	; 0x53a <simpleserial_put>
    return 0x00;
}
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	e0 96       	adiw	r28, 0x30	; 48
 644:	cd bf       	out	0x3d, r28	; 61
 646:	de bf       	out	0x3e, r29	; 62
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 64e:	af 92       	push	r10
 650:	bf 92       	push	r11
 652:	cf 92       	push	r12
 654:	df 92       	push	r13
 656:	ef 92       	push	r14
 658:	ff 92       	push	r15
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	c1 54       	subi	r28, 0x41	; 65
 668:	d2 40       	sbci	r29, 0x02	; 2
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 66e:	0e 94 20 04 	call	0x840	; 0x840 <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 672:	40 91 80 20 	lds	r20, 0x2080	; 0x802080 <num_commands>
 676:	50 91 81 20 	lds	r21, 0x2081	; 0x802081 <num_commands+0x1>
 67a:	20 e2       	ldi	r18, 0x20	; 32
 67c:	30 e2       	ldi	r19, 0x20	; 32
 67e:	00 e0       	ldi	r16, 0x00	; 0
 680:	10 e0       	ldi	r17, 0x00	; 0
 682:	04 17       	cp	r16, r20
 684:	15 07       	cpc	r17, r21
 686:	ec f4       	brge	.+58     	; 0x6c2 <simpleserial_get+0x74>
 688:	2a 5f       	subi	r18, 0xFA	; 250
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(commands[cmd].c == c)
 68c:	f9 01       	movw	r30, r18
 68e:	36 97       	sbiw	r30, 0x06	; 6
 690:	90 81       	ld	r25, Z
 692:	89 13       	cpse	r24, r25
 694:	13 c0       	rjmp	.+38     	; 0x6bc <simpleserial_get+0x6e>
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 696:	26 e0       	ldi	r18, 0x06	; 6
 698:	20 9f       	mul	r18, r16
 69a:	c0 01       	movw	r24, r0
 69c:	21 9f       	mul	r18, r17
 69e:	90 0d       	add	r25, r0
 6a0:	11 24       	eor	r1, r1
 6a2:	9c 01       	movw	r18, r24
 6a4:	20 5e       	subi	r18, 0xE0	; 224
 6a6:	3f 4d       	sbci	r19, 0xDF	; 223
 6a8:	69 01       	movw	r12, r18
 6aa:	d9 01       	movw	r26, r18
 6ac:	15 96       	adiw	r26, 0x05	; 5
 6ae:	8c 91       	ld	r24, X
 6b0:	fe 01       	movw	r30, r28
 6b2:	31 96       	adiw	r30, 0x01	; 1
 6b4:	7f 01       	movw	r14, r30
 6b6:	80 ff       	sbrs	r24, 0
 6b8:	2a c0       	rjmp	.+84     	; 0x70e <simpleserial_get+0xc0>
 6ba:	08 c0       	rjmp	.+16     	; 0x6cc <simpleserial_get+0x7e>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 6bc:	0f 5f       	subi	r16, 0xFF	; 255
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
 6c0:	e0 cf       	rjmp	.-64     	; 0x682 <simpleserial_get+0x34>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 6c2:	04 17       	cp	r16, r20
 6c4:	15 07       	cpc	r17, r21
 6c6:	09 f4       	brne	.+2      	; 0x6ca <simpleserial_get+0x7c>
 6c8:	76 c0       	rjmp	.+236    	; 0x7b6 <simpleserial_get+0x168>
 6ca:	e5 cf       	rjmp	.-54     	; 0x696 <simpleserial_get+0x48>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
	{
		uint8_t l = 0;
 6cc:	cf 57       	subi	r28, 0x7F	; 127
 6ce:	de 4f       	sbci	r29, 0xFE	; 254
 6d0:	18 82       	st	Y, r1
 6d2:	c1 58       	subi	r28, 0x81	; 129
 6d4:	d1 40       	sbci	r29, 0x01	; 1
		char buff[2];
		buff[0] = getch();
 6d6:	0e 94 20 04 	call	0x840	; 0x840 <input_ch_0>
 6da:	89 83       	std	Y+1, r24	; 0x01
		buff[1] = getch();
 6dc:	0e 94 20 04 	call	0x840	; 0x840 <input_ch_0>
 6e0:	8a 83       	std	Y+2, r24	; 0x02
		if (hex_decode(1, buff, &l))
 6e2:	ae 01       	movw	r20, r28
 6e4:	4f 57       	subi	r20, 0x7F	; 127
 6e6:	5e 4f       	sbci	r21, 0xFE	; 254
 6e8:	b7 01       	movw	r22, r14
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 1d 02 	call	0x43a	; 0x43a <hex_decode>
 6f2:	89 2b       	or	r24, r25
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <simpleserial_get+0xaa>
 6f6:	5f c0       	rjmp	.+190    	; 0x7b6 <simpleserial_get+0x168>
			return;
		commands[cmd].len = l;
 6f8:	cf 57       	subi	r28, 0x7F	; 127
 6fa:	de 4f       	sbci	r29, 0xFE	; 254
 6fc:	88 81       	ld	r24, Y
 6fe:	c1 58       	subi	r28, 0x81	; 129
 700:	d1 40       	sbci	r29, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	d6 01       	movw	r26, r12
 706:	11 96       	adiw	r26, 0x01	; 1
 708:	8d 93       	st	X+, r24
 70a:	9c 93       	st	X, r25
 70c:	12 97       	sbiw	r26, 0x02	; 2

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 70e:	67 01       	movw	r12, r14
			return;
		commands[cmd].len = l;
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 710:	26 e0       	ldi	r18, 0x06	; 6
 712:	20 9f       	mul	r18, r16
 714:	c0 01       	movw	r24, r0
 716:	21 9f       	mul	r18, r17
 718:	90 0d       	add	r25, r0
 71a:	11 24       	eor	r1, r1
 71c:	fc 01       	movw	r30, r24
 71e:	ef 5d       	subi	r30, 0xDF	; 223
 720:	ff 4d       	sbci	r31, 0xDF	; 223
 722:	5f 01       	movw	r10, r30
 724:	f5 01       	movw	r30, r10
 726:	80 81       	ld	r24, Z
 728:	91 81       	ldd	r25, Z+1	; 0x01
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	96 01       	movw	r18, r12
 730:	2e 19       	sub	r18, r14
 732:	3f 09       	sbc	r19, r15
 734:	28 17       	cp	r18, r24
 736:	39 07       	cpc	r19, r25
 738:	50 f4       	brcc	.+20     	; 0x74e <simpleserial_get+0x100>
	{
		c = getch();
 73a:	0e 94 20 04 	call	0x840	; 0x840 <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
 73e:	8a 30       	cpi	r24, 0x0A	; 10
 740:	d1 f1       	breq	.+116    	; 0x7b6 <simpleserial_get+0x168>
 742:	8d 30       	cpi	r24, 0x0D	; 13
 744:	c1 f1       	breq	.+112    	; 0x7b6 <simpleserial_get+0x168>
			return;

		ascii_buf[i] = c;
 746:	d6 01       	movw	r26, r12
 748:	8d 93       	st	X+, r24
 74a:	6d 01       	movw	r12, r26
 74c:	eb cf       	rjmp	.-42     	; 0x724 <simpleserial_get+0xd6>
	}

	// Assert that last character is \n or \r
	c = getch();
 74e:	0e 94 20 04 	call	0x840	; 0x840 <input_ch_0>
	if(c != '\n' && c != '\r')
 752:	8a 30       	cpi	r24, 0x0A	; 10
 754:	11 f0       	breq	.+4      	; 0x75a <simpleserial_get+0x10c>
 756:	8d 30       	cpi	r24, 0x0D	; 13
 758:	71 f5       	brne	.+92     	; 0x7b6 <simpleserial_get+0x168>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 75a:	26 e0       	ldi	r18, 0x06	; 6
 75c:	20 9f       	mul	r18, r16
 75e:	c0 01       	movw	r24, r0
 760:	21 9f       	mul	r18, r17
 762:	90 0d       	add	r25, r0
 764:	11 24       	eor	r1, r1
 766:	8c 01       	movw	r16, r24
 768:	00 5e       	subi	r16, 0xE0	; 224
 76a:	1f 4d       	sbci	r17, 0xDF	; 223
 76c:	d8 01       	movw	r26, r16
 76e:	11 96       	adiw	r26, 0x01	; 1
 770:	dc 90       	ld	r13, X
 772:	11 97       	sbiw	r26, 0x01	; 1
 774:	ae 01       	movw	r20, r28
 776:	4f 57       	subi	r20, 0x7F	; 127
 778:	5e 4f       	sbci	r21, 0xFE	; 254
 77a:	b7 01       	movw	r22, r14
 77c:	8d 2d       	mov	r24, r13
 77e:	12 96       	adiw	r26, 0x02	; 2
 780:	9c 91       	ld	r25, X
 782:	0e 94 1d 02 	call	0x43a	; 0x43a <hex_decode>
 786:	89 2b       	or	r24, r25
 788:	b1 f4       	brne	.+44     	; 0x7b6 <simpleserial_get+0x168>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 78a:	d8 01       	movw	r26, r16
 78c:	13 96       	adiw	r26, 0x03	; 3
 78e:	ed 91       	ld	r30, X+
 790:	fc 91       	ld	r31, X
 792:	14 97       	sbiw	r26, 0x04	; 4
 794:	6d 2d       	mov	r22, r13
 796:	ce 01       	movw	r24, r28
 798:	8f 57       	subi	r24, 0x7F	; 127
 79a:	9e 4f       	sbci	r25, 0xFE	; 254
 79c:	19 95       	eicall
 79e:	cf 5b       	subi	r28, 0xBF	; 191
 7a0:	dd 4f       	sbci	r29, 0xFD	; 253
 7a2:	88 83       	st	Y, r24
 7a4:	c1 54       	subi	r28, 0x41	; 65
 7a6:	d2 40       	sbci	r29, 0x02	; 2

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 7a8:	ae 01       	movw	r20, r28
 7aa:	4f 5b       	subi	r20, 0xBF	; 191
 7ac:	5d 4f       	sbci	r21, 0xFD	; 253
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	8a e7       	ldi	r24, 0x7A	; 122
 7b2:	0e 94 9d 02 	call	0x53a	; 0x53a <simpleserial_put>
#endif
}
 7b6:	cf 5b       	subi	r28, 0xBF	; 191
 7b8:	dd 4f       	sbci	r29, 0xFD	; 253
 7ba:	cd bf       	out	0x3d, r28	; 61
 7bc:	de bf       	out	0x3e, r29	; 62
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	ff 90       	pop	r15
 7c8:	ef 90       	pop	r14
 7ca:	df 90       	pop	r13
 7cc:	cf 90       	pop	r12
 7ce:	bf 90       	pop	r11
 7d0:	af 90       	pop	r10
 7d2:	08 95       	ret

000007d4 <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 7d4:	e0 e4       	ldi	r30, 0x40	; 64
 7d6:	f6 e0       	ldi	r31, 0x06	; 6
 7d8:	88 e0       	ldi	r24, 0x08	; 8
 7da:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 7dc:	84 e0       	ldi	r24, 0x04	; 4
 7de:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 7e0:	e0 ea       	ldi	r30, 0xA0	; 160
 7e2:	f8 e0       	ldi	r31, 0x08	; 8
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	85 83       	std	Z+5, r24	; 0x05
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_0
	USART_Baudrate_Set(&USART, 1, 0);
	#else
	USART_Baudrate_Set(&USART, 11, 0);
 7e8:	8b e0       	ldi	r24, 0x0B	; 11
 7ea:	86 83       	std	Z+6, r24	; 0x06
 7ec:	17 82       	std	Z+7, r1	; 0x07
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 7ee:	84 81       	ldd	r24, Z+4	; 0x04
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 7f4:	84 81       	ldd	r24, Z+4	; 0x04
 7f6:	88 60       	ori	r24, 0x08	; 8
 7f8:	84 83       	std	Z+4, r24	; 0x04
 7fa:	08 95       	ret

000007fc <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	1f 92       	push	r1
 802:	1f 92       	push	r1
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62
 808:	69 83       	std	Y+1, r22	; 0x01
 80a:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	30 e0       	ldi	r19, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 810:	49 81       	ldd	r20, Y+1	; 0x01
 812:	5a 81       	ldd	r21, Y+2	; 0x02
 814:	24 17       	cp	r18, r20
 816:	35 07       	cpc	r19, r21
 818:	69 f0       	breq	.+26     	; 0x834 <input_ch_w_timeout_0+0x38>
		{	
		if (USART_IsRXComplete(&USART))
 81a:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 81e:	47 ff       	sbrs	r20, 7
 820:	06 c0       	rjmp	.+12     	; 0x82e <input_ch_w_timeout_0+0x32>
			{
			*data = USART_GetChar(&USART);
 822:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 826:	fc 01       	movw	r30, r24
 828:	20 83       	st	Z, r18
			return BYTE_REC;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	04 c0       	rjmp	.+8      	; 0x836 <input_ch_w_timeout_0+0x3a>
			}
		timeout_counter++;
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	3f 4f       	sbci	r19, 0xFF	; 255
 832:	ee cf       	rjmp	.-36     	; 0x810 <input_ch_w_timeout_0+0x14>
		}
		
	return TIMEOUT;
 834:	80 e0       	ldi	r24, 0x00	; 0
	}
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 840:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 844:	87 ff       	sbrs	r24, 7
 846:	fc cf       	rjmp	.-8      	; 0x840 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 848:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
 84c:	08 95       	ret

0000084e <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 84e:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 852:	95 ff       	sbrs	r25, 5
 854:	fc cf       	rjmp	.-8      	; 0x84e <output_ch_0>
	USART_PutChar(&USART, data);
 856:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 85a:	08 95       	ret

0000085c <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 85c:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 85e:	60 83       	st	Z, r22
 860:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 862:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 864:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 866:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 868:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 86a:	15 86       	std	Z+13, r1	; 0x0d
 86c:	08 95       	ret

0000086e <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 86e:	fc 01       	movw	r30, r24
 870:	62 83       	std	Z+2, r22	; 0x02
 872:	08 95       	ret

00000874 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 874:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 876:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 878:	26 85       	ldd	r18, Z+14	; 0x0e

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 87a:	9f 5f       	subi	r25, 0xFF	; 255
 87c:	93 70       	andi	r25, 0x03	; 3
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	92 13       	cpse	r25, r18
 882:	01 c0       	rjmp	.+2      	; 0x886 <USART_TXBuffer_FreeSpace+0x12>
 884:	80 e0       	ldi	r24, 0x00	; 0
}
 886:	08 95       	ret

00000888 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	ec 01       	movw	r28, r24
 890:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 892:	0e 94 3a 04 	call	0x874	; 0x874 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 896:	88 23       	and	r24, r24
 898:	79 f0       	breq	.+30     	; 0x8b8 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 89a:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 89c:	fe 01       	movw	r30, r28
 89e:	e9 0f       	add	r30, r25
 8a0:	f1 1d       	adc	r31, r1
 8a2:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 8a4:	9f 5f       	subi	r25, 0xFF	; 255
 8a6:	93 70       	andi	r25, 0x03	; 3
 8a8:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 8aa:	e8 81       	ld	r30, Y
 8ac:	f9 81       	ldd	r31, Y+1	; 0x01
 8ae:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 8b0:	9c 7f       	andi	r25, 0xFC	; 252
 8b2:	2a 81       	ldd	r18, Y+2	; 0x02
 8b4:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 8b6:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	1f 91       	pop	r17
 8be:	08 95       	ret

000008c0 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 8c0:	fc 01       	movw	r30, r24
 8c2:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 8c4:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	29 13       	cpse	r18, r25
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <USART_RXBufferData_Available+0xe>
 8cc:	80 e0       	ldi	r24, 0x00	; 0
}
 8ce:	08 95       	ret

000008d0 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 8d0:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 8d2:	84 85       	ldd	r24, Z+12	; 0x0c
 8d4:	df 01       	movw	r26, r30
 8d6:	a8 0f       	add	r26, r24
 8d8:	b1 1d       	adc	r27, r1
 8da:	13 96       	adiw	r26, 0x03	; 3
 8dc:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 8de:	94 85       	ldd	r25, Z+12	; 0x0c
 8e0:	9f 5f       	subi	r25, 0xFF	; 255
 8e2:	93 70       	andi	r25, 0x03	; 3
 8e4:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 8e6:	08 95       	ret

000008e8 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 8e8:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 8ea:	83 85       	ldd	r24, Z+11	; 0x0b
 8ec:	8f 5f       	subi	r24, 0xFF	; 255
 8ee:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 8f0:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 8f2:	a0 81       	ld	r26, Z
 8f4:	b1 81       	ldd	r27, Z+1	; 0x01
 8f6:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 8f8:	82 17       	cp	r24, r18
 8fa:	49 f0       	breq	.+18     	; 0x90e <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 8fc:	23 85       	ldd	r18, Z+11	; 0x0b
 8fe:	df 01       	movw	r26, r30
 900:	a2 0f       	add	r26, r18
 902:	b1 1d       	adc	r27, r1
 904:	13 96       	adiw	r26, 0x03	; 3
 906:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 908:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 90e:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 910:	08 95       	ret

00000912 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 918:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 91a:	85 85       	ldd	r24, Z+13	; 0x0d
 91c:	a0 81       	ld	r26, Z
 91e:	b1 81       	ldd	r27, Z+1	; 0x01
 920:	98 13       	cpse	r25, r24
 922:	07 c0       	rjmp	.+14     	; 0x932 <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 924:	13 96       	adiw	r26, 0x03	; 3
 926:	8c 91       	ld	r24, X
 928:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 92a:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 92c:	13 96       	adiw	r26, 0x03	; 3
 92e:	8c 93       	st	X, r24
 930:	0a c0       	rjmp	.+20     	; 0x946 <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 932:	86 85       	ldd	r24, Z+14	; 0x0e
 934:	ef 01       	movw	r28, r30
 936:	c8 0f       	add	r28, r24
 938:	d1 1d       	adc	r29, r1
 93a:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 93c:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 93e:	86 85       	ldd	r24, Z+14	; 0x0e
 940:	8f 5f       	subi	r24, 0xFF	; 255
 942:	83 70       	andi	r24, 0x03	; 3
 944:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	08 95       	ret

0000094c <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 94c:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 94e:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 950:	70 ff       	sbrs	r23, 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
 954:	81 60       	ori	r24, 0x01	; 1
 956:	01 c0       	rjmp	.+2      	; 0x95a <USART_NineBits_PutChar+0xe>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 958:	8e 7f       	andi	r24, 0xFE	; 254
 95a:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 95c:	60 83       	st	Z, r22
 95e:	08 95       	ret

00000960 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 960:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 962:	84 81       	ldd	r24, Z+4	; 0x04
 964:	80 ff       	sbrs	r24, 0
 966:	04 c0       	rjmp	.+8      	; 0x970 <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 968:	80 81       	ld	r24, Z
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	91 60       	ori	r25, 0x01	; 1
 96e:	08 95       	ret
	}else {
		return(usart->DATA);
 970:	80 81       	ld	r24, Z
 972:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 974:	08 95       	ret

00000976 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 976:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
 97a:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 97e:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 982:	88 60       	ori	r24, 0x08	; 8
 984:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 988:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 98c:	83 ff       	sbrs	r24, 3
 98e:	fc cf       	rjmp	.-8      	; 0x988 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 990:	88 ed       	ldi	r24, 0xD8	; 216
 992:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 994:	83 e0       	ldi	r24, 0x03	; 3
 996:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 99a:	88 e0       	ldi	r24, 0x08	; 8
 99c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 9a0:	08 95       	ret

000009a2 <aes_indep_init>:
#include "aes_keyschedule.h"

aes128_ctx_t ctx;

void aes_indep_init(void)
{
 9a2:	08 95       	ret

000009a4 <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
	aes128_init(key, &ctx);
 9a4:	64 e8       	ldi	r22, 0x84	; 132
 9a6:	71 e2       	ldi	r23, 0x21	; 33
 9a8:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <aes128_init>

000009ac <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt,uint8_t * aes_sbox2,uint8_t * rmask)
{
 9ac:	9a 01       	movw	r18, r20
	aes128_enc(pt, &ctx,aes_sbox2,rmask); /* encrypting the data block */
 9ae:	ab 01       	movw	r20, r22
 9b0:	64 e8       	ldi	r22, 0x84	; 132
 9b2:	71 e2       	ldi	r23, 0x21	; 33
 9b4:	0c 94 ef 06 	jmp	0xdde	; 0xdde <aes128_enc>

000009b8 <aes_indep_enc_pretrigger>:
 9b8:	08 95       	ret

000009ba <aes_indep_enc_posttrigger>:
{
    ;
}

void aes_indep_enc_posttrigger(uint8_t * pt)
{
 9ba:	08 95       	ret

000009bc <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
 9bc:	08 95       	ret

000009be <aes_shiftcol>:
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>
#include "../../../simpleserial/simpleserial.h"

void aes_shiftcol(void* data, uint8_t shift){
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	00 d0       	rcall	.+0      	; 0x9c4 <aes_shiftcol+0x6>
 9c4:	1f 92       	push	r1
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	dc 01       	movw	r26, r24
	uint8_t tmp[4];
	tmp[0] = ((uint8_t*)data)[ 0];
 9cc:	8c 91       	ld	r24, X
 9ce:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = ((uint8_t*)data)[ 4];
 9d0:	14 96       	adiw	r26, 0x04	; 4
 9d2:	8c 91       	ld	r24, X
 9d4:	14 97       	sbiw	r26, 0x04	; 4
 9d6:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = ((uint8_t*)data)[ 8];
 9d8:	18 96       	adiw	r26, 0x08	; 8
 9da:	8c 91       	ld	r24, X
 9dc:	18 97       	sbiw	r26, 0x08	; 8
 9de:	8b 83       	std	Y+3, r24	; 0x03
	tmp[3] = ((uint8_t*)data)[12];
 9e0:	1c 96       	adiw	r26, 0x0c	; 12
 9e2:	8c 91       	ld	r24, X
 9e4:	1c 97       	sbiw	r26, 0x0c	; 12
 9e6:	8c 83       	std	Y+4, r24	; 0x04

	((uint8_t*)data)[ 0] = tmp[(shift+0)&3];
 9e8:	86 2f       	mov	r24, r22
 9ea:	83 70       	andi	r24, 0x03	; 3
 9ec:	e1 e0       	ldi	r30, 0x01	; 1
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	ec 0f       	add	r30, r28
 9f2:	fd 1f       	adc	r31, r29
 9f4:	e8 0f       	add	r30, r24
 9f6:	f1 1d       	adc	r31, r1
 9f8:	80 81       	ld	r24, Z
 9fa:	8c 93       	st	X, r24
	((uint8_t*)data)[ 4] = tmp[(shift+1)&3];
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	fb 01       	movw	r30, r22
 a00:	31 96       	adiw	r30, 0x01	; 1
 a02:	e3 70       	andi	r30, 0x03	; 3
 a04:	ff 27       	eor	r31, r31
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	8c 0f       	add	r24, r28
 a0c:	9d 1f       	adc	r25, r29
 a0e:	e8 0f       	add	r30, r24
 a10:	f9 1f       	adc	r31, r25
 a12:	80 81       	ld	r24, Z
 a14:	14 96       	adiw	r26, 0x04	; 4
 a16:	8c 93       	st	X, r24
 a18:	14 97       	sbiw	r26, 0x04	; 4
	((uint8_t*)data)[ 8] = tmp[(shift+2)&3];
 a1a:	fb 01       	movw	r30, r22
 a1c:	32 96       	adiw	r30, 0x02	; 2
 a1e:	e3 70       	andi	r30, 0x03	; 3
 a20:	ff 27       	eor	r31, r31
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	8c 0f       	add	r24, r28
 a28:	9d 1f       	adc	r25, r29
 a2a:	e8 0f       	add	r30, r24
 a2c:	f9 1f       	adc	r31, r25
 a2e:	80 81       	ld	r24, Z
 a30:	18 96       	adiw	r26, 0x08	; 8
 a32:	8c 93       	st	X, r24
 a34:	18 97       	sbiw	r26, 0x08	; 8
	((uint8_t*)data)[12] = tmp[(shift+3)&3];
 a36:	fb 01       	movw	r30, r22
 a38:	33 96       	adiw	r30, 0x03	; 3
 a3a:	e3 70       	andi	r30, 0x03	; 3
 a3c:	ff 27       	eor	r31, r31
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	8c 0f       	add	r24, r28
 a44:	9d 1f       	adc	r25, r29
 a46:	e8 0f       	add	r30, r24
 a48:	f9 1f       	adc	r31, r25
 a4a:	80 81       	ld	r24, Z
 a4c:	1c 96       	adiw	r26, 0x0c	; 12
 a4e:	8c 93       	st	X, r24
}
 a50:	24 96       	adiw	r28, 0x04	; 4
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	de bf       	out	0x3e, r29	; 62
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	08 95       	ret

00000a5c <aes_encrypt_core>:
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds,uint8_t * aes_sbox2,uint8_t * rmask){
 a5c:	2f 92       	push	r2
 a5e:	3f 92       	push	r3
 a60:	4f 92       	push	r4
 a62:	5f 92       	push	r5
 a64:	6f 92       	push	r6
 a66:	7f 92       	push	r7
 a68:	8f 92       	push	r8
 a6a:	9f 92       	push	r9
 a6c:	af 92       	push	r10
 a6e:	bf 92       	push	r11
 a70:	cf 92       	push	r12
 a72:	df 92       	push	r13
 a74:	ef 92       	push	r14
 a76:	ff 92       	push	r15
 a78:	0f 93       	push	r16
 a7a:	1f 93       	push	r17
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	cd b7       	in	r28, 0x3d	; 61
 a82:	de b7       	in	r29, 0x3e	; 62
 a84:	65 97       	sbiw	r28, 0x15	; 21
 a86:	cd bf       	out	0x3d, r28	; 61
 a88:	de bf       	out	0x3e, r29	; 62
 a8a:	7c 01       	movw	r14, r24
 a8c:	5b 01       	movw	r10, r22
 a8e:	34 2e       	mov	r3, r20
 a90:	29 01       	movw	r4, r18
 a92:	db 01       	movw	r26, r22
 a94:	8a 8b       	std	Y+18, r24	; 0x12
 a96:	9b 8b       	std	Y+19, r25	; 0x13
 a98:	9c 01       	movw	r18, r24
 a9a:	20 5f       	subi	r18, 0xF0	; 240
 a9c:	3f 4f       	sbci	r19, 0xFF	; 255
 a9e:	2c 8b       	std	Y+20, r18	; 0x14
 aa0:	3d 8b       	std	Y+21, r19	; 0x15
 aa2:	fc 01       	movw	r30, r24
    uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
 aa4:	8d 91       	ld	r24, X+
 aa6:	90 81       	ld	r25, Z
 aa8:	89 27       	eor	r24, r25
 aaa:	81 93       	st	Z+, r24
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds,uint8_t * aes_sbox2,uint8_t * rmask){
    uint8_t i;
	for(i=0; i<16; ++i){
 aac:	8c 89       	ldd	r24, Y+20	; 0x14
 aae:	9d 89       	ldd	r25, Y+21	; 0x15
 ab0:	e8 17       	cp	r30, r24
 ab2:	f9 07       	cpc	r31, r25
 ab4:	b9 f7       	brne	.-18     	; 0xaa4 <aes_encrypt_core+0x48>
 ab6:	45 01       	movw	r8, r10
 ab8:	90 e1       	ldi	r25, 0x10	; 16
 aba:	89 0e       	add	r8, r25
 abc:	91 1c       	adc	r9, r1
 abe:	a1 e0       	ldi	r26, 0x01	; 1
 ac0:	a9 8b       	std	Y+17, r26	; 0x11
 ac2:	3e 01       	movw	r6, r28
 ac4:	b1 e1       	ldi	r27, 0x11	; 17
 ac6:	6b 0e       	add	r6, r27
 ac8:	71 1c       	adc	r7, r1
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){//1
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	83 15       	cp	r24, r3
 ace:	08 f0       	brcs	.+2      	; 0xad2 <aes_encrypt_core+0x76>
 ad0:	86 c0       	rjmp	.+268    	; 0xbde <aes_encrypt_core+0x182>
 ad2:	8e 01       	movw	r16, r28
 ad4:	0f 5f       	subi	r16, 0xFF	; 255
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255
 ad8:	f8 01       	movw	r30, r16
 ada:	a7 01       	movw	r20, r14
	uint8_t mask = *rmask;
    uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
        uint8_t help = state->s[i];
 adc:	da 01       	movw	r26, r20
 ade:	8d 91       	ld	r24, X+
 ae0:	ad 01       	movw	r20, r26
		tmp[i] = aes_sbox2[help];
 ae2:	92 01       	movw	r18, r4
 ae4:	28 0f       	add	r18, r24
 ae6:	31 1d       	adc	r19, r1
 ae8:	d9 01       	movw	r26, r18
 aea:	8c 91       	ld	r24, X
 aec:	81 93       	st	Z+, r24
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k,uint8_t * aes_sbox2,uint8_t * rmask,uint8_t n){
	uint8_t mask = *rmask;
    uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 aee:	e6 15       	cp	r30, r6
 af0:	f7 05       	cpc	r31, r7
 af2:	a1 f7       	brne	.-24     	; 0xadc <aes_encrypt_core+0x80>
        uint8_t help = state->s[i];
		tmp[i] = aes_sbox2[help];
	}
	
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
 af4:	61 e0       	ldi	r22, 0x01	; 1
 af6:	ce 01       	movw	r24, r28
 af8:	02 96       	adiw	r24, 0x02	; 2
 afa:	0e 94 df 04 	call	0x9be	; 0x9be <aes_shiftcol>
	aes_shiftcol(tmp+2, 2);
 afe:	62 e0       	ldi	r22, 0x02	; 2
 b00:	ce 01       	movw	r24, r28
 b02:	03 96       	adiw	r24, 0x03	; 3
 b04:	0e 94 df 04 	call	0x9be	; 0x9be <aes_shiftcol>
	aes_shiftcol(tmp+3, 3);
 b08:	63 e0       	ldi	r22, 0x03	; 3
 b0a:	ce 01       	movw	r24, r28
 b0c:	04 96       	adiw	r24, 0x04	; 4
 b0e:	0e 94 df 04 	call	0x9be	; 0x9be <aes_shiftcol>
 b12:	67 01       	movw	r12, r14
	
	/* mixColums */
	for(i=0; i<4; ++i){ 
		t = ((tmp[4*i+0])^ (tmp[4*i+1]) ^ (tmp[4*i+2]) ^ (tmp[4*i+3]));
 b14:	f8 01       	movw	r30, r16
 b16:	60 81       	ld	r22, Z
 b18:	81 81       	ldd	r24, Z+1	; 0x01
 b1a:	68 27       	eor	r22, r24
 b1c:	22 80       	ldd	r2, Z+2	; 0x02
 b1e:	83 81       	ldd	r24, Z+3	; 0x03
 b20:	28 26       	eor	r2, r24
 b22:	26 26       	eor	r2, r22
		
		state->s[4*i+0] = 
			  GF256MUL_2((tmp[4*i+0])^(tmp[4*i+1]))
 b24:	4b e1       	ldi	r20, 0x1B	; 27
 b26:	82 e0       	ldi	r24, 0x02	; 2
 b28:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <gf256mul>
	
	/* mixColums */
	for(i=0; i<4; ++i){ 
		t = ((tmp[4*i+0])^ (tmp[4*i+1]) ^ (tmp[4*i+2]) ^ (tmp[4*i+3]));
		
		state->s[4*i+0] = 
 b2c:	d8 01       	movw	r26, r16
 b2e:	9c 91       	ld	r25, X
 b30:	89 27       	eor	r24, r25
 b32:	82 25       	eor	r24, r2
 b34:	f6 01       	movw	r30, r12
 b36:	80 83       	st	Z, r24
			  GF256MUL_2((tmp[4*i+0])^(tmp[4*i+1]))
			^ (tmp[4*i+0])
			^ (t);//010
		state->s[4*i+1] = 
			  GF256MUL_2((tmp[4*i+1])^(tmp[4*i+2]))
 b38:	11 96       	adiw	r26, 0x01	; 1
 b3a:	6c 91       	ld	r22, X
 b3c:	11 97       	sbiw	r26, 0x01	; 1
 b3e:	12 96       	adiw	r26, 0x02	; 2
 b40:	8c 91       	ld	r24, X
 b42:	68 27       	eor	r22, r24
 b44:	4b e1       	ldi	r20, 0x1B	; 27
 b46:	82 e0       	ldi	r24, 0x02	; 2
 b48:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <gf256mul>
		
		state->s[4*i+0] = 
			  GF256MUL_2((tmp[4*i+0])^(tmp[4*i+1]))
			^ (tmp[4*i+0])
			^ (t);//010
		state->s[4*i+1] = 
 b4c:	d8 01       	movw	r26, r16
 b4e:	11 96       	adiw	r26, 0x01	; 1
 b50:	9c 91       	ld	r25, X
 b52:	11 97       	sbiw	r26, 0x01	; 1
 b54:	89 27       	eor	r24, r25
 b56:	82 25       	eor	r24, r2
 b58:	f6 01       	movw	r30, r12
 b5a:	81 83       	std	Z+1, r24	; 0x01
			  GF256MUL_2((tmp[4*i+1])^(tmp[4*i+2]))
			^ (tmp[4*i+1])
			^ (t);//121
		state->s[4*i+2] = 
			  GF256MUL_2((tmp[4*i+2])^(tmp[4*i+3]))
 b5c:	12 96       	adiw	r26, 0x02	; 2
 b5e:	6c 91       	ld	r22, X
 b60:	12 97       	sbiw	r26, 0x02	; 2
 b62:	13 96       	adiw	r26, 0x03	; 3
 b64:	8c 91       	ld	r24, X
 b66:	68 27       	eor	r22, r24
 b68:	4b e1       	ldi	r20, 0x1B	; 27
 b6a:	82 e0       	ldi	r24, 0x02	; 2
 b6c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <gf256mul>
			^ (t);//010
		state->s[4*i+1] = 
			  GF256MUL_2((tmp[4*i+1])^(tmp[4*i+2]))
			^ (tmp[4*i+1])
			^ (t);//121
		state->s[4*i+2] = 
 b70:	d8 01       	movw	r26, r16
 b72:	12 96       	adiw	r26, 0x02	; 2
 b74:	9c 91       	ld	r25, X
 b76:	12 97       	sbiw	r26, 0x02	; 2
 b78:	89 27       	eor	r24, r25
 b7a:	82 25       	eor	r24, r2
 b7c:	f6 01       	movw	r30, r12
 b7e:	82 83       	std	Z+2, r24	; 0x02
			  GF256MUL_2((tmp[4*i+2])^(tmp[4*i+3]))
			^ (tmp[4*i+2])
			^ (t);//232
		state->s[4*i+3] = 
			  GF256MUL_2((tmp[4*i+3])^(tmp[4*i+0]))
 b80:	13 96       	adiw	r26, 0x03	; 3
 b82:	6c 91       	ld	r22, X
 b84:	13 97       	sbiw	r26, 0x03	; 3
 b86:	8c 91       	ld	r24, X
 b88:	68 27       	eor	r22, r24
 b8a:	4b e1       	ldi	r20, 0x1B	; 27
 b8c:	82 e0       	ldi	r24, 0x02	; 2
 b8e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <gf256mul>
			^ (t);//121
		state->s[4*i+2] = 
			  GF256MUL_2((tmp[4*i+2])^(tmp[4*i+3]))
			^ (tmp[4*i+2])
			^ (t);//232
		state->s[4*i+3] = 
 b92:	d8 01       	movw	r26, r16
 b94:	13 96       	adiw	r26, 0x03	; 3
 b96:	9c 91       	ld	r25, X
 b98:	89 27       	eor	r24, r25
 b9a:	28 26       	eor	r2, r24
 b9c:	f6 01       	movw	r30, r12
 b9e:	23 82       	std	Z+3, r2	; 0x03
 ba0:	0c 5f       	subi	r16, 0xFC	; 252
 ba2:	1f 4f       	sbci	r17, 0xFF	; 255
 ba4:	f4 e0       	ldi	r31, 0x04	; 4
 ba6:	cf 0e       	add	r12, r31
 ba8:	d1 1c       	adc	r13, r1
	aes_shiftcol(tmp+1, 1);
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	
	/* mixColums */
	for(i=0; i<4; ++i){ 
 baa:	06 15       	cp	r16, r6
 bac:	17 05       	cpc	r17, r7
 bae:	09 f0       	breq	.+2      	; 0xbb2 <aes_encrypt_core+0x156>
 bb0:	b1 cf       	rjmp	.-158    	; 0xb14 <aes_encrypt_core+0xb8>
 bb2:	f7 01       	movw	r30, r14
 bb4:	80 e0       	ldi	r24, 0x00	; 0
 bb6:	90 e0       	ldi	r25, 0x00	; 0
			^ (t);//303
	}
	
	/* addKey */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 bb8:	d4 01       	movw	r26, r8
 bba:	a8 0f       	add	r26, r24
 bbc:	b9 1f       	adc	r27, r25
 bbe:	30 81       	ld	r19, Z
 bc0:	2c 91       	ld	r18, X
 bc2:	23 27       	eor	r18, r19
 bc4:	21 93       	st	Z+, r18
 bc6:	01 96       	adiw	r24, 0x01	; 1
			^ (tmp[4*i+3])
			^ (t);//303
	}
	
	/* addKey */
	for(i=0; i<16; ++i){
 bc8:	80 31       	cpi	r24, 0x10	; 16
 bca:	91 05       	cpc	r25, r1
 bcc:	a9 f7       	brne	.-22     	; 0xbb8 <aes_encrypt_core+0x15c>
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){//1
		aes_enc_round(state, &(ks->key[i]),aes_sbox2,rmask,i);
		++i;
 bce:	29 89       	ldd	r18, Y+17	; 0x11
 bd0:	2f 5f       	subi	r18, 0xFF	; 255
 bd2:	29 8b       	std	Y+17, r18	; 0x11
    uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){//1
 bd4:	3a 94       	dec	r3
 bd6:	30 e1       	ldi	r19, 0x10	; 16
 bd8:	83 0e       	add	r8, r19
 bda:	91 1c       	adc	r9, r1
 bdc:	76 cf       	rjmp	.-276    	; 0xaca <aes_encrypt_core+0x6e>
		aes_enc_round(state, &(ks->key[i]),aes_sbox2,rmask,i);
		++i;
	}
	
	
	aes_enc_lastround(state, &(ks->key[i]),aes_sbox2);
 bde:	f7 01       	movw	r30, r14
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k,uint8_t * aes_sbox2){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		uint8_t help = state->s[i];
		state->s[i] = aes_sbox2[help];
 be0:	80 81       	ld	r24, Z
 be2:	d2 01       	movw	r26, r4
 be4:	a8 0f       	add	r26, r24
 be6:	b1 1d       	adc	r27, r1
 be8:	8c 91       	ld	r24, X
 bea:	81 93       	st	Z+, r24

static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k,uint8_t * aes_sbox2){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 bec:	ac 89       	ldd	r26, Y+20	; 0x14
 bee:	bd 89       	ldd	r27, Y+21	; 0x15
 bf0:	ea 17       	cp	r30, r26
 bf2:	fb 07       	cpc	r31, r27
 bf4:	a9 f7       	brne	.-22     	; 0xbe0 <aes_encrypt_core+0x184>
		uint8_t help = state->s[i];
		state->s[i] = aes_sbox2[help];
	}
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
 bf6:	61 e0       	ldi	r22, 0x01	; 1
 bf8:	c7 01       	movw	r24, r14
 bfa:	01 96       	adiw	r24, 0x01	; 1
 bfc:	0e 94 df 04 	call	0x9be	; 0x9be <aes_shiftcol>
	aes_shiftcol(state->s+2, 2);
 c00:	62 e0       	ldi	r22, 0x02	; 2
 c02:	c7 01       	movw	r24, r14
 c04:	02 96       	adiw	r24, 0x02	; 2
 c06:	0e 94 df 04 	call	0x9be	; 0x9be <aes_shiftcol>
	aes_shiftcol(state->s+3, 3);
 c0a:	63 e0       	ldi	r22, 0x03	; 3
 c0c:	c7 01       	movw	r24, r14
 c0e:	03 96       	adiw	r24, 0x03	; 3
 c10:	0e 94 df 04 	call	0x9be	; 0x9be <aes_shiftcol>
 c14:	e9 89       	ldd	r30, Y+17	; 0x11
 c16:	b0 e1       	ldi	r27, 0x10	; 16
 c18:	eb 9f       	mul	r30, r27
 c1a:	c0 01       	movw	r24, r0
 c1c:	11 24       	eor	r1, r1
 c1e:	20 e0       	ldi	r18, 0x00	; 0
 c20:	30 e0       	ldi	r19, 0x00	; 0
	/* keyAdd */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 c22:	fc 01       	movw	r30, r24
 c24:	e2 0f       	add	r30, r18
 c26:	f3 1f       	adc	r31, r19
 c28:	ea 0d       	add	r30, r10
 c2a:	fb 1d       	adc	r31, r11
 c2c:	aa 89       	ldd	r26, Y+18	; 0x12
 c2e:	bb 89       	ldd	r27, Y+19	; 0x13
 c30:	5c 91       	ld	r21, X
 c32:	40 81       	ld	r20, Z
 c34:	45 27       	eor	r20, r21
 c36:	4d 93       	st	X+, r20
 c38:	aa 8b       	std	Y+18, r26	; 0x12
 c3a:	bb 8b       	std	Y+19, r27	; 0x13
 c3c:	2f 5f       	subi	r18, 0xFF	; 255
 c3e:	3f 4f       	sbci	r19, 0xFF	; 255
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
	aes_shiftcol(state->s+2, 2);
	aes_shiftcol(state->s+3, 3);
	/* keyAdd */
	for(i=0; i<16; ++i){
 c40:	20 31       	cpi	r18, 0x10	; 16
 c42:	31 05       	cpc	r19, r1
 c44:	71 f7       	brne	.-36     	; 0xc22 <aes_encrypt_core+0x1c6>
		++i;
	}
	
	
	aes_enc_lastround(state, &(ks->key[i]),aes_sbox2);
}
 c46:	65 96       	adiw	r28, 0x15	; 21
 c48:	cd bf       	out	0x3d, r28	; 61
 c4a:	de bf       	out	0x3e, r29	; 62
 c4c:	df 91       	pop	r29
 c4e:	cf 91       	pop	r28
 c50:	1f 91       	pop	r17
 c52:	0f 91       	pop	r16
 c54:	ff 90       	pop	r15
 c56:	ef 90       	pop	r14
 c58:	df 90       	pop	r13
 c5a:	cf 90       	pop	r12
 c5c:	bf 90       	pop	r11
 c5e:	af 90       	pop	r10
 c60:	9f 90       	pop	r9
 c62:	8f 90       	pop	r8
 c64:	7f 90       	pop	r7
 c66:	6f 90       	pop	r6
 c68:	5f 90       	pop	r5
 c6a:	4f 90       	pop	r4
 c6c:	3f 90       	pop	r3
 c6e:	2f 90       	pop	r2
 c70:	08 95       	ret

00000c72 <aes_init>:

const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
 c72:	8f 92       	push	r8
 c74:	9f 92       	push	r9
 c76:	af 92       	push	r10
 c78:	bf 92       	push	r11
 c7a:	cf 92       	push	r12
 c7c:	df 92       	push	r13
 c7e:	ef 92       	push	r14
 c80:	ff 92       	push	r15
 c82:	0f 93       	push	r16
 c84:	1f 93       	push	r17
 c86:	cf 93       	push	r28
 c88:	df 93       	push	r29
 c8a:	ea 01       	movw	r28, r20
	uint8_t rc=0;
	union {
		uint32_t v32;
		uint8_t  v8[4];
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
 c8c:	6b 01       	movw	r12, r22
 c8e:	f5 e0       	ldi	r31, 0x05	; 5
 c90:	d6 94       	lsr	r13
 c92:	c7 94       	ror	r12
 c94:	fa 95       	dec	r31
 c96:	e1 f7       	brne	.-8      	; 0xc90 <aes_init+0x1e>
 c98:	ec 2c       	mov	r14, r12
	hi=4*(nk+6+1);
 c9a:	86 01       	movw	r16, r12
 c9c:	11 27       	eor	r17, r17
 c9e:	98 01       	movw	r18, r16
 ca0:	29 5f       	subi	r18, 0xF9	; 249
 ca2:	3f 4f       	sbci	r19, 0xFF	; 255
 ca4:	f2 2e       	mov	r15, r18
 ca6:	ff 0c       	add	r15, r15
 ca8:	ff 0c       	add	r15, r15
	memcpy(ctx, key, keysize_b/8);
 caa:	ab 01       	movw	r20, r22
 cac:	a3 e0       	ldi	r26, 0x03	; 3
 cae:	56 95       	lsr	r21
 cb0:	47 95       	ror	r20
 cb2:	aa 95       	dec	r26
 cb4:	e1 f7       	brne	.-8      	; 0xcae <aes_init+0x3c>
 cb6:	bc 01       	movw	r22, r24
 cb8:	ce 01       	movw	r24, r28
 cba:	0e 94 4c 07 	call	0xe98	; 0xe98 <memcpy>
	next_nk = nk;
 cbe:	dc 2c       	mov	r13, r12
	for(i=nk;i<hi;++i){
 cc0:	2c 2d       	mov	r18, r12
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
	uint8_t hi,i,nk, next_nk;
	uint8_t rc=0;
 cc2:	30 e0       	ldi	r19, 0x00	; 0
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 cc4:	2f 15       	cp	r18, r15
 cc6:	08 f0       	brcs	.+2      	; 0xcca <aes_init+0x58>
 cc8:	6e c0       	rjmp	.+220    	; 0xda6 <aes_init+0x134>
		tmp.v32 = ((uint32_t*)(ctx->key[0].ks))[i-1];
 cca:	62 2f       	mov	r22, r18
 ccc:	70 e0       	ldi	r23, 0x00	; 0
 cce:	ab 01       	movw	r20, r22
 cd0:	41 50       	subi	r20, 0x01	; 1
 cd2:	50 4c       	sbci	r21, 0xC0	; 192
 cd4:	44 0f       	add	r20, r20
 cd6:	55 1f       	adc	r21, r21
 cd8:	44 0f       	add	r20, r20
 cda:	55 1f       	adc	r21, r21
 cdc:	4c 0f       	add	r20, r28
 cde:	5d 1f       	adc	r21, r29
 ce0:	fa 01       	movw	r30, r20
 ce2:	80 81       	ld	r24, Z
 ce4:	91 81       	ldd	r25, Z+1	; 0x01
 ce6:	a2 81       	ldd	r26, Z+2	; 0x02
 ce8:	b3 81       	ldd	r27, Z+3	; 0x03
		if(i!=next_nk){
 cea:	2d 15       	cp	r18, r13
 cec:	09 f1       	breq	.+66     	; 0xd30 <aes_init+0xbe>
			if(nk==8 && i%8==4){
 cee:	f8 e0       	ldi	r31, 0x08	; 8
 cf0:	ef 12       	cpse	r14, r31
 cf2:	41 c0       	rjmp	.+130    	; 0xd76 <aes_init+0x104>
 cf4:	e2 2f       	mov	r30, r18
 cf6:	e7 70       	andi	r30, 0x07	; 7
 cf8:	e4 30       	cpi	r30, 0x04	; 4
 cfa:	09 f0       	breq	.+2      	; 0xcfe <aes_init+0x8c>
 cfc:	3c c0       	rjmp	.+120    	; 0xd76 <aes_init+0x104>
				tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 cfe:	e8 2f       	mov	r30, r24
 d00:	f0 e0       	ldi	r31, 0x00	; 0
 d02:	ee 50       	subi	r30, 0x0E	; 14
 d04:	fe 4f       	sbci	r31, 0xFE	; 254
 d06:	e4 91       	lpm	r30, Z
 d08:	8e 2f       	mov	r24, r30
				tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 d0a:	e9 2f       	mov	r30, r25
 d0c:	f0 e0       	ldi	r31, 0x00	; 0
 d0e:	ee 50       	subi	r30, 0x0E	; 14
 d10:	fe 4f       	sbci	r31, 0xFE	; 254
 d12:	e4 91       	lpm	r30, Z
 d14:	9e 2f       	mov	r25, r30
				tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 d16:	ea 2f       	mov	r30, r26
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	ee 50       	subi	r30, 0x0E	; 14
 d1c:	fe 4f       	sbci	r31, 0xFE	; 254
 d1e:	e4 91       	lpm	r30, Z
 d20:	ae 2f       	mov	r26, r30
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 d22:	eb 2f       	mov	r30, r27
 d24:	f0 e0       	ldi	r31, 0x00	; 0
 d26:	ee 50       	subi	r30, 0x0E	; 14
 d28:	fe 4f       	sbci	r31, 0xFE	; 254
 d2a:	e4 91       	lpm	r30, Z
 d2c:	be 2f       	mov	r27, r30
 d2e:	23 c0       	rjmp	.+70     	; 0xd76 <aes_init+0x104>
			}
		} else {
			next_nk += nk;
 d30:	d2 2e       	mov	r13, r18
 d32:	de 0c       	add	r13, r14
#include <avr/pgmspace.h>

static
void aes_rotword(void* a){
	uint8_t t;
	t=((uint8_t*)a)[0];
 d34:	c8 2e       	mov	r12, r24
	((uint8_t*)a)[0] = ((uint8_t*)a)[1];
	((uint8_t*)a)[1] = ((uint8_t*)a)[2];
	((uint8_t*)a)[2] = ((uint8_t*)a)[3];
 d36:	ab 2e       	mov	r10, r27
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			}
		} else {
			next_nk += nk;
			aes_rotword(&(tmp.v32));
			tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 d38:	e9 2f       	mov	r30, r25
 d3a:	f0 e0       	ldi	r31, 0x00	; 0
 d3c:	ee 50       	subi	r30, 0x0E	; 14
 d3e:	fe 4f       	sbci	r31, 0xFE	; 254
 d40:	b4 90       	lpm	r11, Z
			tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 d42:	ea 2f       	mov	r30, r26
 d44:	f0 e0       	ldi	r31, 0x00	; 0
 d46:	ee 50       	subi	r30, 0x0E	; 14
 d48:	fe 4f       	sbci	r31, 0xFE	; 254
 d4a:	e4 91       	lpm	r30, Z
 d4c:	9e 2f       	mov	r25, r30
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 d4e:	ea 2d       	mov	r30, r10
 d50:	f0 e0       	ldi	r31, 0x00	; 0
 d52:	ee 50       	subi	r30, 0x0E	; 14
 d54:	fe 4f       	sbci	r31, 0xFE	; 254
 d56:	e4 91       	lpm	r30, Z
 d58:	ae 2f       	mov	r26, r30
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 d5a:	ec 2d       	mov	r30, r12
 d5c:	f0 e0       	ldi	r31, 0x00	; 0
 d5e:	ee 50       	subi	r30, 0x0E	; 14
 d60:	fe 4f       	sbci	r31, 0xFE	; 254
 d62:	e4 91       	lpm	r30, Z
 d64:	be 2f       	mov	r27, r30
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
 d66:	e3 2f       	mov	r30, r19
 d68:	f0 e0       	ldi	r31, 0x00	; 0
 d6a:	e8 51       	subi	r30, 0x18	; 24
 d6c:	fe 4f       	sbci	r31, 0xFE	; 254
 d6e:	e4 91       	lpm	r30, Z
 d70:	8b 2d       	mov	r24, r11
 d72:	8e 27       	eor	r24, r30
			rc++;
 d74:	3f 5f       	subi	r19, 0xFF	; 255
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
 d76:	fb 01       	movw	r30, r22
 d78:	e0 1b       	sub	r30, r16
 d7a:	f1 0b       	sbc	r31, r17
 d7c:	ee 0f       	add	r30, r30
 d7e:	ff 1f       	adc	r31, r31
 d80:	ee 0f       	add	r30, r30
 d82:	ff 1f       	adc	r31, r31
 d84:	ec 0f       	add	r30, r28
 d86:	fd 1f       	adc	r31, r29
 d88:	80 80       	ld	r8, Z
 d8a:	91 80       	ldd	r9, Z+1	; 0x01
 d8c:	a2 80       	ldd	r10, Z+2	; 0x02
 d8e:	b3 80       	ldd	r11, Z+3	; 0x03
 d90:	88 25       	eor	r24, r8
 d92:	99 25       	eor	r25, r9
 d94:	aa 25       	eor	r26, r10
 d96:	bb 25       	eor	r27, r11
 d98:	fa 01       	movw	r30, r20
 d9a:	84 83       	std	Z+4, r24	; 0x04
 d9c:	95 83       	std	Z+5, r25	; 0x05
 d9e:	a6 83       	std	Z+6, r26	; 0x06
 da0:	b7 83       	std	Z+7, r27	; 0x07
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 da2:	2f 5f       	subi	r18, 0xFF	; 255
 da4:	8f cf       	rjmp	.-226    	; 0xcc4 <aes_init+0x52>
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
		                                   ^ tmp.v32;
	}
}
 da6:	df 91       	pop	r29
 da8:	cf 91       	pop	r28
 daa:	1f 91       	pop	r17
 dac:	0f 91       	pop	r16
 dae:	ff 90       	pop	r15
 db0:	ef 90       	pop	r14
 db2:	df 90       	pop	r13
 db4:	cf 90       	pop	r12
 db6:	bf 90       	pop	r11
 db8:	af 90       	pop	r10
 dba:	9f 90       	pop	r9
 dbc:	8f 90       	pop	r8
 dbe:	08 95       	ret

00000dc0 <aes128_init>:

void aes128_init(const void* key, aes128_ctx_t* ctx){
 dc0:	ab 01       	movw	r20, r22
	aes_init(key, 128, (aes_genctx_t*)ctx);
 dc2:	60 e8       	ldi	r22, 0x80	; 128
 dc4:	70 e0       	ldi	r23, 0x00	; 0
 dc6:	0c 94 39 06 	jmp	0xc72	; 0xc72 <aes_init>

00000dca <aes192_init>:
}

void aes192_init(const void* key, aes192_ctx_t* ctx){
 dca:	ab 01       	movw	r20, r22
	aes_init(key, 192, (aes_genctx_t*)ctx);
 dcc:	60 ec       	ldi	r22, 0xC0	; 192
 dce:	70 e0       	ldi	r23, 0x00	; 0
 dd0:	0c 94 39 06 	jmp	0xc72	; 0xc72 <aes_init>

00000dd4 <aes256_init>:
}

void aes256_init(const void* key, aes256_ctx_t* ctx){
 dd4:	ab 01       	movw	r20, r22
	aes_init(key, 256, (aes_genctx_t*)ctx);
 dd6:	60 e0       	ldi	r22, 0x00	; 0
 dd8:	71 e0       	ldi	r23, 0x01	; 1
 dda:	0c 94 39 06 	jmp	0xc72	; 0xc72 <aes_init>

00000dde <aes128_enc>:
 */

#include "aes.h"
#include "aes_enc.h"

void aes128_enc(void* buffer, aes128_ctx_t* ctx,uint8_t * aes_sbox2,uint8_t * rmask){
 dde:	0f 93       	push	r16
 de0:	1f 93       	push	r17
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 10,aes_sbox2,rmask);
 de2:	89 01       	movw	r16, r18
 de4:	9a 01       	movw	r18, r20
 de6:	4a e0       	ldi	r20, 0x0A	; 10
 de8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <aes_encrypt_core>
}
 dec:	1f 91       	pop	r17
 dee:	0f 91       	pop	r16
 df0:	08 95       	ret

00000df2 <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
 df2:	78 2f       	mov	r23, r24
	clr r24
 df4:	88 27       	eor	r24, r24
1:	
	lsr A
 df6:	76 95       	lsr	r23
	breq 4f
 df8:	31 f0       	breq	.+12     	; 0xe06 <gf256mul+0x14>
	brcc 2f
 dfa:	08 f4       	brcc	.+2      	; 0xdfe <gf256mul+0xc>
	eor P, B
 dfc:	86 27       	eor	r24, r22
2:
	lsl B
 dfe:	66 0f       	add	r22, r22
	brcc 3f
 e00:	08 f4       	brcc	.+2      	; 0xe04 <gf256mul+0x12>
	eor B, r20	
 e02:	64 27       	eor	r22, r20
3:
	rjmp 1b
 e04:	f8 cf       	rjmp	.-16     	; 0xdf6 <gf256mul+0x4>
4:
	brcc 2f
 e06:	08 f4       	brcc	.+2      	; 0xe0a <gf256mul+0x18>
	eor P, B
 e08:	86 27       	eor	r24, r22
2:
	ret
 e0a:	08 95       	ret

00000e0c <main>:

}
#endif

int main(void)
{
 e0c:	cf 93       	push	r28
 e0e:	df 93       	push	r29
 e10:	cd b7       	in	r28, 0x3d	; 61
 e12:	de b7       	in	r29, 0x3e	; 62
 e14:	60 97       	sbiw	r28, 0x10	; 16
 e16:	cd bf       	out	0x3d, r28	; 61
 e18:	de bf       	out	0x3e, r29	; 62
	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 e1a:	80 e1       	ldi	r24, 0x10	; 16
 e1c:	e0 e0       	ldi	r30, 0x00	; 0
 e1e:	f0 e2       	ldi	r31, 0x20	; 32
 e20:	de 01       	movw	r26, r28
 e22:	11 96       	adiw	r26, 0x01	; 1
 e24:	01 90       	ld	r0, Z+
 e26:	0d 92       	st	X+, r0
 e28:	8a 95       	dec	r24
 e2a:	e1 f7       	brne	.-8      	; 0xe24 <main+0x18>

    platform_init();
 e2c:	0e 94 bb 04 	call	0x976	; 0x976 <platform_init>
    init_uart();
 e30:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <init_uart0>
    trigger_setup();
 e34:	81 e0       	ldi	r24, 0x01	; 1
 e36:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>

	aes_indep_init();
 e3a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <aes_indep_init>
	aes_indep_key(tmp);
 e3e:	ce 01       	movw	r24, r28
 e40:	01 96       	adiw	r24, 0x01	; 1
 e42:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <aes_indep_key>
    putch('l');
    putch('o');
    putch('\n');
    */

	simpleserial_init();
 e46:	0e 94 88 02 	call	0x510	; 0x510 <simpleserial_init>
    #if SS_VER == SS_VER_2_0
    simpleserial_addcmd(0x01, 16, aes);
    #else
    simpleserial_addcmd('k', 16, get_key);
 e4a:	44 ea       	ldi	r20, 0xA4	; 164
 e4c:	51 e0       	ldi	r21, 0x01	; 1
 e4e:	60 e1       	ldi	r22, 0x10	; 16
 e50:	70 e0       	ldi	r23, 0x00	; 0
 e52:	8b e6       	ldi	r24, 0x6B	; 107
 e54:	0e 94 85 02 	call	0x50a	; 0x50a <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
 e58:	48 ea       	ldi	r20, 0xA8	; 168
 e5a:	51 e0       	ldi	r21, 0x01	; 1
 e5c:	60 e1       	ldi	r22, 0x10	; 16
 e5e:	70 e0       	ldi	r23, 0x00	; 0
 e60:	80 e7       	ldi	r24, 0x70	; 112
 e62:	0e 94 85 02 	call	0x50a	; 0x50a <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 e66:	4c e9       	ldi	r20, 0x9C	; 156
 e68:	51 e0       	ldi	r21, 0x01	; 1
 e6a:	60 e0       	ldi	r22, 0x00	; 0
 e6c:	70 e0       	ldi	r23, 0x00	; 0
 e6e:	88 e7       	ldi	r24, 0x78	; 120
 e70:	0e 94 85 02 	call	0x50a	; 0x50a <simpleserial_addcmd>
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 e74:	21 e0       	ldi	r18, 0x01	; 1
 e76:	40 ea       	ldi	r20, 0xA0	; 160
 e78:	51 e0       	ldi	r21, 0x01	; 1
 e7a:	62 e1       	ldi	r22, 0x12	; 18
 e7c:	70 e0       	ldi	r23, 0x00	; 0
 e7e:	8d e6       	ldi	r24, 0x6D	; 109
 e80:	0e 94 62 02 	call	0x4c4	; 0x4c4 <simpleserial_addcmd_flags>
    simpleserial_addcmd('s', 2, enc_multi_setnum);
 e84:	4e e9       	ldi	r20, 0x9E	; 158
 e86:	51 e0       	ldi	r21, 0x01	; 1
 e88:	62 e0       	ldi	r22, 0x02	; 2
 e8a:	70 e0       	ldi	r23, 0x00	; 0
 e8c:	83 e7       	ldi	r24, 0x73	; 115
 e8e:	0e 94 85 02 	call	0x50a	; 0x50a <simpleserial_addcmd>
    #endif
    while(1)
        simpleserial_get();
 e92:	0e 94 27 03 	call	0x64e	; 0x64e <simpleserial_get>
 e96:	fd cf       	rjmp	.-6      	; 0xe92 <main+0x86>

00000e98 <memcpy>:
 e98:	fb 01       	movw	r30, r22
 e9a:	dc 01       	movw	r26, r24
 e9c:	02 c0       	rjmp	.+4      	; 0xea2 <memcpy+0xa>
 e9e:	01 90       	ld	r0, Z+
 ea0:	0d 92       	st	X+, r0
 ea2:	41 50       	subi	r20, 0x01	; 1
 ea4:	50 40       	sbci	r21, 0x00	; 0
 ea6:	d8 f7       	brcc	.-10     	; 0xe9e <memcpy+0x6>
 ea8:	08 95       	ret

00000eaa <_exit>:
 eaa:	f8 94       	cli

00000eac <__stop_program>:
 eac:	ff cf       	rjmp	.-2      	; 0xeac <__stop_program>
